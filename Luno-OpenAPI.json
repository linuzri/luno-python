{
  "openapi": "3.0.0",
  "info": {
    "description": "The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:\n\n<ul>\n   <li>Create accounts for trading in cryptocurrencies</li>\n   <li>Access current and historic cryptocurrency market data</li>\n   <li>Submit trade orders and view order status</li>\n   <li>Buy and sell Bitcoin and Ethereum</li>\n   <li>Send and receive Bitcoin and Ethereum</li>\n   <li>Generate Bitcoin and Ethereum wallet addresses</li>\n </ul>\n\n The Luno API brings the world of Bitcoin and Ethereum to your doorstep.\n",
    "title": "Luno API",
    "version": "1.2.5"
  },
  "paths": {
    "/api/1/accounts": {
      "post": {
        "description": "This request creates an Account for the specified currency.  Please note that the balances for the Account will be displayed based on the <code>asset</code> value, which is the currency the Account is based on.\n\nPermissions required: <code>Perm_W_Addresses</code>",
        "tags": [
          "Accounts"
        ],
        "summary": "Create account",
        "operationId": "createAccount",
        "parameters": [
          {
            "example": "XBT",
            "x-go-name": "Currency",
            "description": "The currency code for the Account you want to create.  Please see the Currency section for a detailed list of currencies supported by the Luno platform.\n\nUsers must be verified to trade currency in order to be able to create an Account.  For more information on the verification process, please see <a href=\"/help/en/articles/1000168396\">How do I verify my identity?</a>.\n\nUsers have a limit of 10 accounts per currency.",
            "name": "currency",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "Trading ACC",
            "x-go-name": "Name",
            "description": "The label to use for this account",
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/accounts/{id}/name": {
      "put": {
        "description": "Update the name of an account with a given ID.\n\nPermissions required: <code>Perm_W_Addresses</code>",
        "tags": [
          "Accounts"
        ],
        "summary": "Update Account Name",
        "operationId": "updateAccountName",
        "parameters": [
          {
            "example": 12345,
            "x-go-name": "ID",
            "description": "Account ID - the unique identifier for the specific Account.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": "Trading ACC",
            "x-go-name": "Name",
            "description": "The label to use for this account",
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateAccountNameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/accounts/{id}/pending": {
      "get": {
        "description": "Return a list of all transactions that have not completed for the Account.\n\nPending transactions are not numbered, and may be reordered, deleted or updated at any time.\n\nPermissions required: <code>Perm_R_Transactions</code>",
        "tags": [
          "Accounts"
        ],
        "summary": "List pending transactions",
        "operationId": "listPendingTransactions",
        "parameters": [
          {
            "example": 12345,
            "x-go-name": "ID",
            "description": "Account ID",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listPendingTransactionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/accounts/{id}/transactions": {
      "get": {
        "description": "Return a list of transaction entries from an account.\n\nTransaction entry rows are numbered sequentially starting from 1, where 1 is\nthe oldest entry. The range of rows to return are specified with the\n<code>min_row</code> (inclusive) and <code>max_row</code> (exclusive)\nparameters. At most 1000 rows can be requested per call.\n\nIf <code>min_row</code> or <code>max_row</code> is non-positive, the range\nwraps around the most recent row. For example, to fetch the 100 most recent\nrows, use <code>min_row=-100</code> and <code>max_row=0</code>.\n\nPermissions required: <code>Perm_R_Transactions</code>",
        "tags": [
          "Accounts"
        ],
        "summary": "List transactions",
        "operationId": "ListTransactions",
        "parameters": [
          {
            "example": 12345,
            "x-go-name": "ID",
            "description": "Account ID - the unique identifier for the specific Account.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 1,
            "x-go-name": "MinRow",
            "description": "Minimum of the row range to return (inclusive)",
            "name": "min_row",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 1000,
            "x-go-name": "MaxRow",
            "description": "Maximum of the row range to return (exclusive)",
            "name": "max_row",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTransactionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/address/validate": {
      "post": {
        "description": "Validate receive addresses, to which a customer wishes to make cryptocurrency sends, are verified under covering\nregulatory requirements for the customer such as travel rules.\n\nPermissions required: <code>Perm_W_Send</code>",
        "tags": [
          "Address"
        ],
        "summary": "Validate",
        "operationId": "validate",
        "parameters": [
          {
            "example": "1AbbJJzevwFFVBKvZRtQHHFgrJyYTKaMw2",
            "x-go-name": "Address",
            "description": "Destination address or email address.\n\n<b>Note</b>:\n<ul>\n<li>Ethereum addresses must be\n<a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\" target=\"_blank\" rel=\"nofollow\">checksummed</a>.</li>\n<li>Ethereum validations of email addresses are not supported.</li>\n</ul>",
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "XBT",
            "x-go-name": "Currency",
            "description": "Currency is the currency associated with the address.",
            "name": "currency",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "MyNamedAddress",
            "x-go-name": "AddressName",
            "description": "AddressName is the optional name under which to store the address as in the address book.",
            "name": "address_name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": true,
            "x-go-name": "HasDestinationTag",
            "description": "Optional boolean flag indicating that a XRP destination tag is provided (even if zero).",
            "name": "has_destination_tag",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": 12345,
            "x-go-name": "DestinationTag",
            "description": "Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided.",
            "name": "destination_tag",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": "Test:TEST-test ?;lsbjaciuq12712837519*T*&$^572",
            "x-go-name": "Memo",
            "description": "Optional memo string used to provide account information for ATOM, etc. where it holds \"account\" information\nfor a generic address.",
            "name": "memo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "IsSelfSend",
            "description": "IsSelfSend to indicate that the address belongs to the customer.\nIf this field is true then the remaining omitempty fields should not\nbe populated.",
            "name": "is_self_send",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "x-go-name": "IsPrivateWallet",
            "description": "IsPrivateWallet indicates if the address is for private wallet and not held at an exchange.",
            "name": "is_private_wallet",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": "John Smith's Wallet or Luno or MX Exchange",
            "x-go-name": "WalletName",
            "description": "PrivateWalletName is the name of the private wallet",
            "name": "wallet_name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "John Smith",
            "x-go-name": "BeneficiaryName",
            "description": "BeneficiaryName is the name of the beneficial owner if is it is a private address",
            "name": "beneficiary_name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "IsLegalEntity",
            "description": "IsLegalEntity indicates if the address is for a legal entity and not a private beneficiary.\nIf this field is true then the fields BeneficiaryName, Nationality & DateOfBirth should be empty but the\nfields InstitutionName and Country should be populated.\nIf this field is false and IsSelfSend is false (or empty) then the field InstitutionName should be empty but the\nfields BeneficiaryName, Nationality & DateOfBirth and Country should be populated.",
            "name": "is_legal_entity",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": "Some Co Ltd",
            "x-go-name": "InstitutionName",
            "description": "InstitutionName is the name of the beneficial owner if is it is a legal entities address",
            "name": "institution_name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "MYS",
            "x-go-name": "Country",
            "description": "Country is the ISO 3166-1 country code of the beneficial owner of the address",
            "name": "country",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "1970-01-01",
            "x-go-name": "PhysicalAddress",
            "description": "PhysicalAddress is the legal physical address of the beneficial owner of the crypto address",
            "name": "physical_address",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "MYS",
            "x-go-name": "Nationality",
            "description": "Nationality ISO 3166-1 country code of the nationality of the (non-institutional) beneficial owner of the address",
            "name": "nationality",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "1970-01-01",
            "x-go-name": "DateOfBirth",
            "description": "DateOfBirth is the date of birth of the (non-institutional) beneficial owner of the address in the form \"YYYY-MM-DD\"",
            "name": "date_of_birth",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateAddressResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/balance": {
      "get": {
        "description": "The list of all Accounts and their respective balances for the requesting user.\n\nPermissions required: <code>Perm_R_Balance</code>",
        "tags": [
          "Accounts"
        ],
        "summary": "List account balances",
        "operationId": "getBalances",
        "parameters": [
          {
            "example": "XBT",
            "x-go-name": "Assets",
            "description": "Only return balances for wallets with these currencies (if not provided,\nall balances will be returned). To request balances for multiple currencies,\npass the parameter multiple times,\ne.g. `assets=XBT&assets=ETH`.",
            "name": "assets",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBalancesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/beneficiaries": {
      "get": {
        "description": "Returns a list of bank beneficiaries.\n\nPermissions required: <code>Perm_R_Beneficiaries</code>",
        "tags": [
          "Beneficiaries"
        ],
        "summary": "List beneficiaries",
        "operationId": "ListBeneficiaries",
        "parameters": [
          {
            "example": "John* or *Smith or *John*",
            "x-go-name": "BankRecipient",
            "name": "bank_recipient",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listBeneficiariesResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new beneficiary.\n\nPermissions required: <code>Perm_W_Beneficiaries</code>",
        "tags": [
          "Beneficiaries"
        ],
        "summary": "Create beneficiary",
        "operationId": "CreateBeneficiary",
        "parameters": [
          {
            "example": "FIRNZAJJ",
            "x-go-name": "Bank",
            "description": "Bank SWIFT code",
            "name": "bank_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "9234101100063672",
            "x-go-name": "AccountNumber",
            "description": "Beneficiary bank account number",
            "name": "bank_account_number",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "AccountType",
            "description": "Bank account type",
            "name": "account_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Current/Cheque",
                "Savings",
                "Transmission"
              ]
            }
          },
          {
            "x-go-name": "Recipient",
            "description": "The owner of the recipient account",
            "name": "bank_recipient",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createBeneficiaryResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/1/beneficiaries/{id}": {
      "delete": {
        "description": "Delete a beneficiary\n\nPermissions required: <code>Perm_W_Beneficiaries</code>",
        "tags": [
          "Beneficiaries"
        ],
        "summary": "Delete beneficiary",
        "operationId": "DeleteBeneficiary",
        "parameters": [
          {
            "example": 12345,
            "x-go-name": "ID",
            "description": "ID of the Beneficiary to delete.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The Beneficiary was deleted successfully"
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/1/fee_info": {
      "get": {
        "description": "Returns the fees and 30 day trading volume (as of midnight) for a given currency pair.  For complete details, please see <a href=\"en/countries\">Fees & Features</a>.\n\nPermissions required: <code>Perm_R_Orders</code>",
        "tags": [
          "Orders"
        ],
        "summary": "Get fee information",
        "operationId": "getFeeInfo",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "Get fee information about this pair.",
            "name": "pair",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getFeeInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/funding_address": {
      "get": {
        "description": "Returns the default receive address associated with your account and the\namount received via the address. Users can specify an optional address parameter to return information for a non-default receive address.\nIn the response, <code>total_received</code> is the total confirmed amount received excluding unconfirmed transactions.\n<code>total_unconfirmed</code> is the total sum of unconfirmed receive transactions.\n\nPermissions required: <code>Perm_R_Addresses</code>",
        "tags": [
          "Receive"
        ],
        "summary": "Get receive address",
        "operationId": "getFundingAddress",
        "parameters": [
          {
            "example": "XBT",
            "x-go-name": "Asset",
            "description": "Currency code of the asset.",
            "name": "asset",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "1AbbJJzevwFFVBKvZRtQHHFgrJyYTKaMw2",
            "x-go-name": "Address",
            "description": "Specific cryptocurrency address to retrieve. If not provided, the\ndefault address will be used.",
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getFundingAddressResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Allocates a new receive address to your account. There is a rate limit of 1\naddress per hour, but bursts of up to 10 addresses are allowed. Only 1\nEthereum receive address can be created.\n\nPermissions required: <code>Perm_W_Addresses</code>",
        "tags": [
          "Receive"
        ],
        "summary": "Create receive address",
        "operationId": "createFundingAddress",
        "parameters": [
          {
            "example": "XBT",
            "x-go-name": "Asset",
            "description": "Currency code of the asset.",
            "name": "asset",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "My BTC wallet",
            "x-go-name": "Name",
            "description": "An optional name for the new Receive Address",
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": 12345,
            "x-go-name": "AccountID",
            "description": "An optional account_id to assign the new Receive Address to. If omitted, Receive Address will be assigned to the default account.",
            "name": "account_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createFundingAddressResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/listorders": {
      "get": {
        "description": "Returns a list of the most recently placed Orders.\nUsers can specify an optional <code>state=PENDING</code> parameter to restrict the results to only open Orders.\nUsers can also specify the market by using the optional currency pair parameter.\n\nPermissions required: <code>Perm_R_Orders</code>",
        "tags": [
          "Orders"
        ],
        "summary": "List orders",
        "operationId": "ListOrders",
        "parameters": [
          {
            "example": "PENDING",
            "x-go-name": "OrderState",
            "description": "Filter to only orders of this state",
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "COMPLETE"
              ]
            }
          },
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "Filter to only orders of this currency pair",
            "name": "pair",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": 1530865703508,
            "x-go-name": "CreatedBefore",
            "description": "Filter to orders created before this timestamp (Unix milliseconds)",
            "name": "created_before",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 986,
            "x-go-name": "Limit",
            "description": "Limit to this many orders",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrdersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/listtrades": {
      "get": {
        "description": "Returns a list of the recent Trades for a given currency pair for this user, sorted by oldest first.\nIf <code>before</code> is specified, then Trades are returned sorted by most-recent first.\n\n<code>type</code> in the response indicates the type of Order that was placed to participate in the trade.\nPossible types: <code>BID</code>, <code>ASK</code>.\n\nIf <code>is_buy</code> in the response is true, then the Order which completed the trade (market taker) was a Bid Order.\n\nResults of this query may lag behind the latest data.\n\nPermissions required: <code>Perm_R_Orders</code>",
        "tags": [
          "Orders"
        ],
        "summary": "List trades",
        "operationId": "ListUserTrades",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "Filter to trades of this currency pair.",
            "name": "pair",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Since",
            "description": "Filter to trades on or after this timestamp (Unix milliseconds).",
            "name": "since",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "timestamp"
            }
          },
          {
            "x-go-name": "Before",
            "description": "Filter to trades before this timestamp (Unix milliseconds).",
            "name": "before",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "timestamp"
            }
          },
          {
            "example": 10,
            "x-go-name": "AfterSeq",
            "description": "Filter to trades from (including) this sequence number.\nDefault behaviour is not to include this filter.",
            "name": "after_seq",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 1,
            "x-go-name": "BeforeSeq",
            "description": "Filter to trades before (excluding) this sequence number.\nDefault behaviour is not to include this filter.",
            "name": "before_seq",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": true,
            "x-go-name": "SortDesc",
            "description": "If set to true, sorts trades in descending order, otherwise ascending\norder will be assumed.",
            "name": "sort_desc",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": 100,
            "x-go-name": "Limit",
            "description": "Limit to this number of trades (default 100).",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUserTradesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/marketorder": {
      "post": {
        "description": "A Market Order executes immediately, and either buys as much of the asset that can be bought for a set amount of fiat currency, or sells a set amount of the asset for as much as possible.\n\n<b>Warning!</b> Orders cannot be reversed once they have executed.\nPlease ensure your program has been thoroughly tested before submitting Orders.\n\nIf no <code>base_account_id</code> or <code>counter_account_id</code> are specified, the default base currency or counter currency account will be used.\nUsers can find their account IDs by calling the <a href=\"#operation/getBalances\">Balances</a> request.\n\nPermissions required: <code>Perm_W_Orders</code>",
        "tags": [
          "Orders"
        ],
        "summary": "Post Market Order",
        "operationId": "PostMarketOrder",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "The currency pair to trade.",
            "name": "pair",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "BUY",
            "x-go-name": "OrderType",
            "description": "<code>BUY</code> to buy an asset<br>\n<code>SELL</code> to sell an asset",
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "BUY",
                "SELL"
              ]
            }
          },
          {
            "example": "100.50",
            "x-go-name": "CounterVolume",
            "description": "For a <code>BUY</code> order: amount of the counter currency to use (e.g. how much EUR to use to buy BTC in the BTC/EUR market)",
            "name": "counter_volume",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "amount"
            }
          },
          {
            "example": "1.423",
            "x-go-name": "BaseVolume",
            "description": "For a <code>SELL</code> order: amount of the base currency to use (e.g. how much BTC to sell for EUR in the BTC/EUR market)",
            "name": "base_volume",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "amount"
            }
          },
          {
            "example": 12345,
            "x-go-name": "BaseAccountID",
            "description": "The base currency account to use in the trade.",
            "name": "base_account_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 12345,
            "x-go-name": "CounterAccountID",
            "description": "The counter currency account to use in the trade.",
            "name": "counter_account_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "x-go-name": "Timestamp",
            "description": "Unix timestamp in milliseconds of when the request was created and sent.",
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 5000,
            "x-go-name": "TTL",
            "description": "Specifies the number of milliseconds after timestamp the request is valid for.\nIf `timestamp` is not specified, `ttl` will not be used.",
            "name": "ttl",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 10000,
              "default": 10000
            }
          },
          {
            "example": "mkt-53960812",
            "x-go-name": "ClientOrderID",
            "description": "Client order ID.\nMay only contain alphanumeric (0-9, a-z, or A-Z) and special characters (_ ; , . -). Maximum length: 255.\nIt will be available in read endpoints, so you can use it to reconcile Luno with your internal system.\nValues must be unique across all your successful order creation endpoint calls; trying to create an order\nwith the same `client_order_id` as one of your past orders will result in a HTTP 409 Conflict response.",
            "name": "client_order_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMarketOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/orderbook": {
      "get": {
        "description": "This request returns all `bids` and `asks`, for the currency pair specified, in the Order Book.\n\n`asks` are sorted by price ascending and `bids` are sorted by price descending.\n\nMultiple orders at the same price are not aggregated.\n\n<b>WARNING:</b> This may return a large amount of data.\nUsers are recommended to use the <a href=\"#operation/getOrderBookTop\">top 100 bids and asks</a>\nor the <a href=\"#tag/Streaming-API\">Streaming API</a>.",
        "tags": [
          "Market"
        ],
        "summary": "Get full order book",
        "operationId": "GetOrderBookFull",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "Currency pair of the Orders to retrieve",
            "name": "pair",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderBookResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/1/orderbook_top": {
      "get": {
        "description": "This request returns the best 100 `bids` and `asks`, for the currency pair specified, in the Order Book.\n\n`asks` are sorted by price ascending and `bids` are sorted by price descending.\n\nMultiple orders at the same price are aggregated.",
        "tags": [
          "Market"
        ],
        "summary": "Get top order book",
        "operationId": "GetOrderBook",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "Currency pair of the Orders to retrieve",
            "name": "pair",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderBookResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/1/orders/{id}": {
      "get": {
        "description": "Get an Order's details by its ID.\n\nPermissions required: <code>Perm_R_Orders</code>",
        "tags": [
          "Orders"
        ],
        "summary": "Get order",
        "operationId": "GetOrder",
        "parameters": [
          {
            "example": "BXMC2CJ7HNB88U4",
            "x-go-name": "Ref",
            "description": "Order reference",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/postorder": {
      "post": {
        "description": "<b>Warning!</b> Orders cannot be reversed once they have executed.\nPlease ensure your program has been thoroughly tested before submitting Orders.\n\nIf no <code>base_account_id</code> or <code>counter_account_id</code> are specified,\nyour default base currency or counter currency account will be used.\nYou can find your Account IDs by calling the <a href=\"#operation/getBalances\">Balances</a> API.\n\nPermissions required: <code>Perm_W_Orders</code>",
        "tags": [
          "Orders"
        ],
        "summary": "Post Limit Order",
        "operationId": "PostLimitOrder",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "The currency pair to trade.",
            "name": "pair",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "BID",
            "x-go-name": "OrderType",
            "description": "<code>BID</code> for a bid (buy) limit order<br>\n<code>ASK</code> for an ask (sell) limit order",
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "BID",
                "ASK"
              ]
            }
          },
          {
            "example": "IOC",
            "x-go-name": "TimeInForce",
            "description": "<code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user.</br>\n<code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>\n<code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.",
            "name": "time_in_force",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "GTC",
                "IOC",
                "FOK"
              ],
              "default": "GTC"
            }
          },
          {
            "example": false,
            "x-go-name": "PostOnly",
            "description": "Post-only Orders will be cancelled if they would otherwise have traded\nimmediately.\nFor example, if there's a bid at ZAR 100,000 and you place a post-only ask at ZAR 100,000,\nyour order will be cancelled instead of trading.\nIf the best bid is ZAR 100,000 and you place a post-only ask at ZAR 101,000,\nyour order won't trade but will go into the order book.",
            "name": "post_only",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": "1.423",
            "x-go-name": "Volume",
            "description": "Amount of cryptocurrency to buy or sell as a decimal string in units of the currency.",
            "name": "volume",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "amount"
            }
          },
          {
            "example": "1200",
            "x-go-name": "Price",
            "description": "Limit price as a decimal string in units of ZAR/BTC.",
            "name": "price",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "amount"
            }
          },
          {
            "example": "1150",
            "x-go-name": "StopPrice",
            "description": "Trigger trade price to activate this order as a decimal string. If this\nis set then this is treated as a Stop Limit Order and `stop_direction`\nis expected to be set too.",
            "name": "stop_price",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "amount"
            }
          },
          {
            "example": "ABOVE",
            "x-go-name": "StopDirection",
            "description": "Side of the trigger price to activate the order. This should be set if `stop_price` is also\nset.\n\n`RELATIVE_LAST_TRADE` will automatically infer the direction based on the last\ntrade price and the stop price. If last trade price is less than stop price then stop\ndirection is ABOVE otherwise is BELOW.",
            "name": "stop_direction",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "BELOW",
                "ABOVE",
                "RELATIVE_LAST_TRADE"
              ]
            }
          },
          {
            "example": 12345,
            "x-go-name": "BaseAccountID",
            "description": "The base currency Account to use in the trade.",
            "name": "base_account_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 12345,
            "x-go-name": "CounterAccountID",
            "description": "The counter currency Account to use in the trade.",
            "name": "counter_account_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "x-go-name": "Timestamp",
            "description": "Unix timestamp in milliseconds of when the request was created and sent.",
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 5000,
            "x-go-name": "TTL",
            "description": "Specifies the number of milliseconds after timestamp the request is valid for.\nIf `timestamp` is not specified, `ttl` will not be used.",
            "name": "ttl",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 10000,
              "default": 10000
            }
          },
          {
            "example": "lmt-53960812",
            "x-go-name": "ClientOrderID",
            "description": "Client order ID.\nMay only contain alphanumeric (0-9, a-z, or A-Z) and special characters (_ ; , . -). Maximum length: 255.\nIt will be available in read endpoints, so you can use it to reconcile Luno with your internal system.\nValues must be unique across all your successful order creation endpoint calls; trying to create an order\nwith the same `client_order_id` as one of your past orders will result in a HTTP 409 Conflict response.",
            "name": "client_order_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLimitOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/send": {
      "post": {
        "description": "Send assets from an Account. Please note that the asset type sent must match the receive address of the same cryptocurrency of the same type - Bitcoin to Bitcoin, Ethereum to Ethereum, etc.\n\nSends can be made to cryptocurrency receive addresses.\n\n<b>Note:</b> This is currently unavailable to users who are verified in countries with money travel rules.\n\nPermissions required: <code>Perm_W_Send</code>",
        "tags": [
          "Send"
        ],
        "summary": "Send",
        "operationId": "send",
        "parameters": [
          {
            "example": "1.5",
            "x-go-name": "Amount",
            "description": "Amount to send as a decimal string.",
            "name": "amount",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "amount"
            }
          },
          {
            "example": "XBT",
            "x-go-name": "Currency",
            "description": "Currency to send.",
            "name": "currency",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "1AbbJJzevwFFVBKvZRtQHHFgrJyYTKaMw2",
            "x-go-name": "Address",
            "description": "Destination address or email address.\n\n<b>Note</b>:\n<ul>\n<li>Ethereum addresses must be\n<a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\" target=\"_blank\" rel=\"nofollow\">checksummed</a>.</li>\n<li>Ethereum sends to email addresses are not supported.</li>\n</ul>",
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "My description",
            "x-go-name": "Description",
            "description": "User description for the transaction to record on the account statement.",
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "My message",
            "x-go-name": "Message",
            "description": "Message to send to the recipient.\nThis is only relevant when sending to an email address.",
            "name": "message",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "123e4567-e89b-12d3-a456-426655440000",
            "x-go-name": "ExternalID",
            "description": "Optional unique ID to associate with this withdrawal.\nUseful to prevent duplicate sends in case of failure.\nThis supports all alphanumeric characters, as well as \"-\" and \"_\".",
            "name": "external_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": true,
            "x-go-name": "HasDestinationTag",
            "description": "Optional boolean flag indicating that a XRP destination tag is provided (even if zero).",
            "name": "has_destination_tag",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": 12345,
            "x-go-name": "DestinationTag",
            "description": "Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided.",
            "name": "destination_tag",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": "Test:TEST-test ?;lsbjaciuq12712837519*T*&$^572",
            "x-go-name": "Memo",
            "description": "Optional memo string used to provide account information for ATOM, etc. where it holds \"account\" information\nfor a generic address.",
            "name": "memo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": true,
            "x-go-name": "IsForexSend",
            "description": "Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsForexSend must be true if sending to an address hosted outside of Malaysia.",
            "name": "is_forex_send",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": true,
            "x-go-name": "IsDRB",
            "description": "Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsDRB must be true if the user has Domestic Ringgit Borrowing (DRB).",
            "name": "is_drb",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": true,
            "x-go-name": "ForexNoticeSelfDeclaration",
            "description": "Only required for Foreign Exchange Notification under the Malaysia FEN rules. ForexNoticeSelfDeclaration must be true if the user has exceeded his/her annual investment limit in foreign currency assets.",
            "name": "forex_notice_self_declaration",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": 5998716001549232000,
            "x-go-name": "AccountID",
            "description": "Optional source account. In case of multiple accounts for a single currency, the source account that will provide the funds for the transaction may be specified. If omitted, the default account will be used.",
            "name": "account_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sendResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/send_fee": {
      "get": {
        "description": "Calculate fees involved with a crypto send request.\n\nSend address can be to a cryptocurrency receive address, or the email address of another Luno platform user.\n\nPermissions required: <code>MP_None</code>",
        "tags": [
          "Send"
        ],
        "summary": "Estimate send fees",
        "operationId": "SendFee",
        "parameters": [
          {
            "example": "1.5",
            "x-go-name": "Amount",
            "description": "Amount to send as a decimal string.",
            "name": "amount",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "amount"
            }
          },
          {
            "example": "XBT",
            "x-go-name": "Currency",
            "description": "Currency to send.",
            "name": "currency",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "1AbbJJzevwFFVBKvZRtQHHFgrJyYTKaMw2",
            "x-go-name": "Address",
            "description": "Destination address or email address.\n\n<b>Note</b>:\n<ul>\n<li>Ethereum addresses must be\n<a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\" target=\"_blank\" rel=\"nofollow\">checksummed</a>.</li>\n<li>Ethereum sends to email addresses are not supported.</li>\n</ul>",
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendFeeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/stoporder": {
      "post": {
        "description": "Request to cancel an Order.\n\n<b>Note!</b>: Once an Order has been completed, it can not be reversed.\nThe return value from this request will indicate if the Stop request was successful or not.\n\nPermissions required: <code>Perm_W_Orders</code>",
        "tags": [
          "Orders"
        ],
        "summary": "Cancel Order",
        "operationId": "StopOrder",
        "parameters": [
          {
            "example": "BXMC2CJ7HNB88U4",
            "x-go-name": "OrderID",
            "description": "The Order identifier as a string.",
            "name": "order_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/ticker": {
      "get": {
        "description": "Returns the latest ticker indicators for the specified currency pair.\n\nPlease see the <a href=\"#tag/currency \">Currency list</a> for the complete list of supported currency pairs.",
        "tags": [
          "Market"
        ],
        "summary": "Get ticker for currency pair",
        "operationId": "GetTicker",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "Currency pair",
            "name": "pair",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTickerResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/1/tickers": {
      "get": {
        "description": "Returns the latest ticker indicators from all active Luno exchanges.\n\nPlease see the <a href=\"#tag/currency \">Currency list</a> for the complete list of supported currency pairs.",
        "tags": [
          "Market"
        ],
        "summary": "List tickers for all currency pairs",
        "operationId": "GetTickers",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "Return tickers for multiple markets (if not provided, all tickers will be returned).\nTo request tickers for multiple markets, pass the parameter multiple times,\ne.g. `pair=XBTZAR&pair=ETHZAR`.",
            "name": "pair",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTickersResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/1/trades": {
      "get": {
        "description": "Returns a list of recent trades for the specified currency pair. At most\n100 trades are returned per call and never trades older than 24h. The\ntrades are sorted from newest to oldest.\n\nPlease see the <a href=\"#tag/currency \">Currency list</a> for the complete list of supported currency pairs.",
        "tags": [
          "Market"
        ],
        "summary": "List recent trades",
        "operationId": "ListTrades",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "Currency pair of the market to list the trades from",
            "name": "pair",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Since",
            "description": "Fetch trades executed after this time, specified as a Unix timestamp in\nmilliseconds. An error will be returned if this is before 24h ago. Use\nthis parameter to either restrict to a shorter window or to iterate over\nthe trades in case you need more than the 100 most recent trades.",
            "name": "since",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "timestamp"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTradesResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/1/withdrawals": {
      "get": {
        "description": "Returns a list of withdrawal requests.\n\nPermissions required: <code>Perm_R_Withdrawals</code>",
        "tags": [
          "Transfers"
        ],
        "summary": "List withdrawal requests",
        "operationId": "ListWithdrawals",
        "parameters": [
          {
            "example": 12345,
            "x-go-name": "BeforeID",
            "description": "Filter to withdrawals requested on or before the withdrawal with this ID.\nCan be used for pagination.",
            "name": "before_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 986,
            "x-go-name": "Limit",
            "description": "Limit to this many withdrawals",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWithdrawalsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new withdrawal request to the specified beneficiary.\n\nPermissions required: <code>Perm_W_Withdrawals</code>",
        "tags": [
          "Transfers"
        ],
        "summary": "Request a withdrawal",
        "operationId": "CreateWithdrawal",
        "parameters": [
          {
            "example": "ZAR_EFT",
            "x-go-name": "Type",
            "description": "Withdrawal method.",
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "10000.00",
            "x-go-name": "Amount",
            "description": "Amount to withdraw. The currency withdrawn depends on the type setting.",
            "name": "amount",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "amount"
            }
          },
          {
            "example": 12345,
            "x-go-name": "BeneficiaryID",
            "description": "The beneficiary ID of the bank account the withdrawal will be paid out to.\nThis parameter is required if the user has set up multiple beneficiaries.\nThe beneficiary ID can be found by selecting on the beneficiary name on the user’s <a href=\"/wallet/beneficiaries\">Beneficiaries</a> page.",
            "name": "beneficiary_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": true,
            "x-go-name": "Fast",
            "description": "If true, it will be a fast withdrawal if possible. Fast withdrawals come with a fee.\nCurrently fast withdrawals are only available for `type=ZAR_EFT`; for other types, an error is returned.\nFast withdrawals are not possible for Bank of Baroda, Deutsche Bank, Merrill Lynch South Africa, UBS, Postbank and Tyme Bank.\nThe fee to be charged is the same as when withdrawing from the UI.",
            "name": "fast",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "x-go-name": "Reference",
            "description": "For internal use.\nDeprecated: We don't allow custom references and will remove this soon.",
            "name": "reference",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "123e4567-e89b-12d3-a456-426655440000",
            "x-go-name": "ExternalID",
            "description": "Optional unique ID to associate with this withdrawal.\nUseful to prevent duplicate sends.\nThis field supports all alphanumeric characters including \"-\" and \"_\".",
            "name": "external_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWithdrawalResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/withdrawals/{id}": {
      "get": {
        "description": "Returns the status of a particular withdrawal request.\n\nPermissions required: <code>Perm_R_Withdrawals</code>",
        "tags": [
          "Transfers"
        ],
        "summary": "Get withdrawal request",
        "operationId": "GetWithdrawal",
        "parameters": [
          {
            "example": 12345,
            "x-go-name": "ID",
            "description": "Withdrawal ID to retrieve.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWithdrawalResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Cancels a withdrawal request.\nThis can only be done if the request is still in state <code>PENDING</code>.\n\nPermissions required: <code>Perm_W_Withdrawals</code>",
        "tags": [
          "Transfers"
        ],
        "summary": "Cancel withdrawal request",
        "operationId": "CancelWithdrawal",
        "parameters": [
          {
            "example": 12345,
            "x-go-name": "ID",
            "description": "ID of the withdrawal to cancel.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelWithdrawalResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/exchange/1/candles": {
      "get": {
        "description": "Get candlestick market data from the specified time until now, from the oldest to the most recent.\n\nPermissions required: <code>MP_None</code>",
        "tags": [
          "Market"
        ],
        "summary": "Get candles",
        "operationId": "GetCandles",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "Currency pair",
            "name": "pair",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Since",
            "description": "Filter to candles starting on or after this timestamp (Unix milliseconds).\nOnly up to 1000 of the earliest candles are returned.",
            "name": "since",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "timestamp"
            }
          },
          {
            "example": 300,
            "x-go-name": "Duration",
            "description": "Candle duration in seconds.\nFor example, 300 corresponds to 5m candles. Currently supported\ndurations are: 60 (1m), 300 (5m), 900 (15m), 1800 (30m), 3600 (1h),\n10800 (3h), 14400 (4h), 28800 (8h), 86400 (24h), 259200 (3d), 604800\n(7d).",
            "name": "duration",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCandlesResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/exchange/1/markets": {
      "get": {
        "description": "List all supported markets parameter information like price scale, min and\nmax order volumes and market ID.",
        "tags": [
          "Market"
        ],
        "summary": "Get markets info",
        "operationId": "Markets",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Markets",
            "description": "List of market pairs to return. Requesting only the required pairs will improve response times.",
            "name": "pair",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketsInfoResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/exchange/1/move": {
      "get": {
        "description": "Get a specific move funds instruction by either <code>id</code> or\n<code>client_move_id</code>. If both are provided an API error will be\nreturned.\n\nPermissions required: <code>MP_None</code>",
        "tags": [
          "Accounts"
        ],
        "summary": "Move",
        "operationId": "GetMove",
        "parameters": [
          {
            "example": "18563829047",
            "x-go-name": "ID",
            "description": "Get by the system ID. This is mutually exclusive with <code>client_move_id</code> and is required if\n<code>client_move_id</code> is not provided.",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "mv-53960812",
            "x-go-name": "ClientMoveID",
            "description": "Get by the user defined ID. This is mutually exclusive with <code>id</code> and is required if <code>id</code> is\nnot provided.",
            "name": "client_move_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMoveResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      },
      "post": {
        "description": "Move funds between two of your transactional accounts with the same currency\nThe funds may not be moved by the time the request returns. The GET method\ncan be used to poll for the move's status.\n\nNote: moves will show as transactions, but not as transfers.\n\nPermissions required: <code>MP_None_Write</code>",
        "tags": [
          "Accounts"
        ],
        "summary": "Move",
        "operationId": "Move",
        "parameters": [
          {
            "example": "10000.00",
            "x-go-name": "Amount",
            "description": "Amount to transfer. Must be positive.",
            "name": "amount",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "amount"
            }
          },
          {
            "example": 12345,
            "x-go-name": "DebitAccountID",
            "description": "The account to debit the funds from.",
            "name": "debit_account_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 12345,
            "x-go-name": "CreditAccountID",
            "description": "The account to credit the funds to.",
            "name": "credit_account_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": "mv-53960812",
            "x-go-name": "ClientMoveID",
            "description": "Client move ID.\nMay only contain alphanumeric (0-9, a-z, or A-Z) and special characters (_ ; , . -). Maximum length: 255.\nIt will be available in read endpoints, so you can use it to avoid duplicate moves between the same accounts.\nValues must be unique across all your successful calls of this endpoint; trying to create a move request\nwith the same `client_move_id` as one of your past move requests will result in a HTTP 409 Conflict response.",
            "name": "client_move_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MoveResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/exchange/1/move/list_moves": {
      "get": {
        "description": "Returns a list of the most recent moves ordered from newest to oldest.\nThis endpoint will list up to 100 most recent moves by default.\n\nPermissions required: <code>MP_None</code>",
        "tags": [
          "Accounts"
        ],
        "summary": "List Moves",
        "operationId": "ListMoves",
        "parameters": [
          {
            "example": 1530865703508,
            "x-go-name": "Before",
            "description": "Filter to moves requested before this timestamp (Unix milliseconds)",
            "name": "before",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 986,
            "x-go-name": "Limit",
            "description": "Limit to this many moves",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMovesResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/exchange/1/transfers": {
      "get": {
        "description": "Returns a list of the most recent confirmed transfers ordered from newest to\noldest.\nThis includes bank transfers, card payments, or on-chain transactions that\nhave been reflected on your account available balance.\n\nNote that the Transfer `amount` is always a positive value and you should\nuse the `inbound` flag to determine the direction of the transfer.\n\nIf you need to paginate the results you can set the `before` parameter to\nthe last returned transfer `created_at` field value and repeat the request\nuntil you have all the transfers you need.\nThis endpoint will list up to 100 transfers at a time by default.\n\nPermissions required: <Code>Perm_R_Transfers</Code>",
        "tags": [
          "Transfers"
        ],
        "summary": "List transfers",
        "operationId": "ListTransfers",
        "parameters": [
          {
            "x-go-name": "AccountID",
            "description": "Unique identifier of the account to list the transfers from.",
            "name": "account_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 986,
            "x-go-name": "Limit",
            "description": "Limit to this many transfers.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            }
          },
          {
            "example": 1530865703508,
            "x-go-name": "Before",
            "description": "Filter to transfers created before this timestamp (Unix milliseconds).\nThe default value (0) will return the latest transfers on the account.",
            "name": "before",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTransfersResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/exchange/2/listorders": {
      "get": {
        "description": "Returns a list of the most recently placed orders ordered from newest to\noldest. This endpoint will list up to 100 most recent open orders by\ndefault.\n\n<b>Please note:</b> This data is archived 100 days after an exchange order is completed.\n\nPermissions required: <Code>Perm_R_Orders</Code>",
        "tags": [
          "Orders"
        ],
        "summary": "List Orders v2",
        "operationId": "ListOrdersV2",
        "parameters": [
          {
            "example": "XBTZAR",
            "x-go-name": "Pair",
            "description": "Filter to only orders of this currency pair.",
            "name": "pair",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": true,
            "x-go-name": "Closed",
            "description": "If true, will return closed orders instead of open orders.",
            "name": "closed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "example": 1530865703508,
            "x-go-name": "CreatedBefore",
            "description": "Filter to orders created before this timestamp (Unix milliseconds)",
            "name": "created_before",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": 986,
            "x-go-name": "Limit",
            "description": "Limit to this many orders",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrders2Response"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/exchange/2/orders/{id}": {
      "get": {
        "description": "Get the details for an order.\n\nPermissions required: <code>Perm_R_Orders</code>",
        "tags": [
          "Orders"
        ],
        "summary": "Get Order v2",
        "operationId": "GetOrderV2",
        "parameters": [
          {
            "example": "BXMC2CJ7HNB88U4",
            "x-go-name": "Ref",
            "description": "Order reference",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrder2Response"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    },
    "/api/exchange/3/order": {
      "get": {
        "description": "Get the details for an order by order reference or client order ID.\nExactly one of the two parameters must be provided, otherwise an error is returned.\nPermissions required: <code>Perm_R_Orders</code>",
        "tags": [
          "Orders"
        ],
        "summary": "Get Order v3",
        "operationId": "GetOrderV3",
        "parameters": [
          {
            "example": "BXMC2CJ7HNB88U4",
            "x-go-name": "Ref",
            "description": "Order reference",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "lmt-53960812",
            "x-go-name": "ClientOrderID",
            "description": "Client Order ID has the value that was passed in when the Order was posted.",
            "name": "client_order_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrder2Response"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/apiError"
          }
        }
      }
    }
  },
  "tags": [
    {
      "description": "Some API calls require your application to authenticate itself. This is done using an API key associated with your account. You can create an API key by visiting <a href=\"/wallet/settings/api_keys\">the API Keys section</a> on the settings page.\n\nAn API key consists of a <code>key id</code> and a <code>key secret</code>. For example, <code>cnz2yjswbv3jd</code> (key id) and <code>0hydMZDb9HRR3Qq-iqALwZtXLkbLR4fWxtDZvkB9h4I</code> (key secret).\n\nAPI requests are authenticated using HTTP basic authentication with the key id as the username and the key secret as the password. A missing, incorrect or revoked key causes error 401 to be returned.</p> <p>Each API key is granted a set of permissions when it is created. The key can only be used to call the permitted API functions.\n\n<h3>Permissions</h3>\n\nThe following is a list of the possible permissions.\n\n<ul>\n  <li><code>Perm_R_Balance = 1</code> (View balance)</li>\n  <li><code>Perm_R_Transactions = 2</code> (View transactions)</li>\n  <li><code>Perm_W_Send = 4</code> (Send to any address)</li>\n  <li><code>Perm_R_Addresses = 8</code> (View addresses)</li>\n  <li><code>Perm_W_Addresses = 16</code> (Create addresses)</li>\n  <li><code>Perm_R_Orders = 32</code> (View orders)</li>\n  <li><code>Perm_W_Orders = 64</code> (Create orders)</li>\n  <li><code>Perm_R_Withdrawals = 128</code> (View withdrawals)</li>\n  <li><code>Perm_W_Withdrawals = 256</code> (Create withdrawals)</li>\n  <li><code>Perm_W_ClientDebit = 8192</code> (Debit accounts)</li>\n  <li><code>Perm_W_ClientCredit = 16384</code> (Credit accounts)</li>\n  <li><code>Perm_R_Beneficiaries = 32768</code> (View beneficiaries)</li>\n  <li><code>Perm_W_Beneficiaries = 65536</code> (Create and delete beneficiaries)</li>\n  <li><code>Perm_R_Transfers = 131072</code> (Create and delete beneficiaries)</li>\n</ul>\n\nA set of permissions is represented as the bitwise OR of each permission in the set. For example the set of permissions required to view balances and orders is <code>Perm_R_Balance | Perm_R_Orders = 33</code>.\n\nWhen API keys are created, users can select permission sets that automatically include various permissions for their key.  These are listed below.\n\n<table>\n<thead>\n<tr>\n<td>Permission Set</td>\n<td>Included Permissions</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>\n    Read-only access\n  </td>\n  <td>\n    View Balance\n    <br />View transactions\n    <br />Send to any address\n    <br />View orders\n    <br />View withdrawals\n    <br />View beneficiaries\n    <br />View transfers\n  </td>\n</tr>\n<tr>\n  <td>\n    Trading access\n  </td>\n  <td>\n    View Balance\n    <br />View transactions\n    <br />Send to any address\n    <br />View orders\n    <br />View withdrawals\n    <br />View beneficiaries\n    <br />Create orders\n  </td>\n</tr>\n</tbody>\n</table>\n",
      "name": "Authentication"
    },
    {
      "description": "Timestamps are always represented as an integer number of milliseconds since the <code>UTC Epoch</code> (a Unix timestamp).\n\nPrices and volumes are always represented as a decimal strings e.g. \"123.3432\". Strings are used rather than floats to preserve the precision.\n\nParameters for POST calls are sent as URL-encoded forms (<code>application/x-www-form-urlencoded</code>).\n",
      "name": "Conventions"
    },
    {
      "description": "The following currencies are supported through the Luno market platform.  For complete details, please see <a href=\"/en/countries\">Fees & features</a>:\n  \n  Fiat:\n  \n  <ul>\n    <li><b>AUD</b>: Australian Dollar</li>\n    <li><b>EUR</b>: Euro</li>\n    <li><b>GBP</b>: Pounds</li>\n    <li><b>IDR</b>: Indonesian rupiah</li>\n    <li><b>MYR</b>: Malaysian Ringgit</li>\n    <li><b>NGN</b>: Nigerian Naira</li>\n    <li><b>UGX</b>: Ugandan Shilling</li>\n    <li><b>ZAR</b>: South African Rand</li>\n  </ul>\n  \n  Crypto:\n\n  <ul>\n    <li><b>AAVE</b>:  Aave</li>\n    <li><b>ADA</b>:   Cardano</li>\n    <li><b>ALGO</b>:  Algorand</li>\n    <li><b>ATOM</b>:  Cosmos</li>\n    <li><b>AVAX</b>:  Avalanche</li>\n    <li><b>BCH</b>:   Bitcoin Cash</li>\n    <li><b>CRV</b>:   Curve</li>\n    <li><b>DOT</b>:   Polkadot</li>\n    <li><b>DOGE</b>:  Dogecoin</li>\n    <li><b>ETH</b>:   Ethereum</li>\n    <li><b>FTM</b>:   Fantom</li>\n    <li><b>GRT</b>:   The Graph</li>\n    <li><b>LINK</b>:  Chainlink</li>\n    <li><b>LTC</b>:   Litecoin</li>\n    <li><b>MKR</b>:   Maker</li>\n    <li><b>MATIC</b>: Polygon</li>\n    <li><b>NEAR</b>:  Near Protocol</li>\n    <li><b>SAND</b>:  The Sandbox</li>\n    <li><b>SNX</b>:   Synthetix</li>\n    <li><b>SOL</b>:   Solana</li>\n    <li><b>TRX</b>:   Tron</li>\n    <li><b>UNI</b>:   Uniswap</li>\n    <li><b>USDC</b>:  USD Coin</li>\n    <li><b>USDT</b>:  Tether</li>\n    <li><b>XBT</b>:   Bitcoin</li>\n    <li><b>XLM</b>:   Stellar</li>\n    <li><b>XRP</b>:   Ripple</li>\n  </ul>\n\nThe following are examples of currency pairs that are supported through the Luno market platform. For complete details, please see <a href=\"/en/countries\">Fees & Features</a>:\n\n<ul>\n  <li><b>XBTEUR</b></li>\n  <li><b>XBTZAR</b></li>\n  <li><b>XBTUGX</b></li>\n  <li><b>XBTZMW</b></li>\n  <li><b>ETHXBT</b></li>\n  <li><b>BCHXBT</b></li>\n</ul>\n\nThe following methods are available for Funds Withdrawal based on the type of currency or currency pair being withdrawn.\n\nCurrency:\n\n<ul>\n  <li><b>BTC</b>: Bitcoin</li>\n  <li><b>BCH</b>: Bitcoin Cash</li>\n  <li><b>ETH</b>: Ethereum</li>\n  <li><b>LTC</b>: Litecoin</li>\n  <li><b>XRP</b>: XRP</li>\n</ul>\n\nWithdrawal methods:\n\n<ul>\n  <li><b>ZAR_EFT</b>: EFT</li>\n  <li><b>NAD_EFT</b>: EFT</li>\n  <li><b>KES_EFT</b>: EFT</li>\n  <li><b>KES_MPESA</b>: M-Pesa</li>\n  <li><b>MYR_IBG</b>: Interbank GIRO / IBFT</li>\n  <li><b>IDR_LLG</b>: Bank transfer, Lalu Lintas Giro</li>\n  <li><b>NGN_EFT</b>: Bank transfer</li>\n  <li><b>ZMW_EFT</b>: Bank transfer</li>\n  <li><b>SGD_GIRO</b>: GIRO / FAST</li>\n  <li><b>SGD_WIRE</b>: International Wire</li>\n  <li><b>EUR_SEPA</b>: SEPA transfer</li>\n  <li><b>GBP</b>: Bank transfer</li>\n  <li><b>UGX_EFT</b>: Bank transfer</li>\n</ul>\n",
      "name": "Currency"
    },
    {
      "description": "The <a href=\"https://github.com/luno/luno-go\" target=\"_blank\" rel=\"nofollow\">Go library</a> is the recommended way to access the API.\n\nThe following libraries were implemented by third parties or are no longer under active development and are listed here for convenience. No support is provided by Luno and they may be out of date. A thorough review of the code is recommended before including them in any project.\n\n<ul>\n  <li><a href=\"https://github.com/22sevengithub/bitx-android\" target=\"_blank\" rel=\"nofollow\">Android</a></li>\n  <li><a href=\"https://hackage.haskell.org/package/bitx-bitcoin\" target=\"_blank\" rel=\"nofollow\">Haskell</a></li>\n  <li><a href=\"https://github.com/luno/luno-java\" target=\"_blank\" rel=\"nofollow\">Java</a></li>\n  <li><a href=\"https://npmjs.org/package/bitx\" target=\"_blank\" rel=\"nofollow\">Node.js</a></li>\n  <li><a href=\"https://packagist.org/packages/luno/luno-php\" target=\"_blank\" rel=\"nofollow\">PHP</a></li>\n  <li><a href=\"https://pypi.python.org/pypi/luno-python\" target=\"_blank\" rel=\"nofollow\">Python</a></li>\n  <li><a href=\"https://github.com/bitx/bitx-ruby\" target=\"_blank\" rel=\"nofollow\">Ruby</a></li>\n</ul>\n",
      "name": "Libraries"
    },
    {
      "description": "APIs are rate limited to 300 calls per minute. Calls made in excess of this limit will receive a HTTP error <code>Code 429</code> response.\n\nThe streaming API is limited to 50 sessions open simultaneously. Calls in excess of this limit will receive a <code>session limit exceeded</code> message.\n",
      "name": "Rate Limiting"
    },
    {
      "description": "Always use HTTPS when calling the API. Non-TLS HTTP requests cause error 403 to be returned. Using non-TLS requests can leak your authentication credentials.\n\nVerify that your client validates the server's SSL certificate. Many libraries (e.g. <code>urllib2</code> in Python2) do not validate server certificates by default. Failing to verify the server certificate makes your application vulnerable to man-in-the-middle attack.\n",
      "name": "Security"
    },
    {
      "description": "All transactions on the Luno platform operate on <em>Accounts</em>.  Each Account is denominated in a single currency and contains an ordered list of entries that track its running balance.\n\nEach Account has a separate balance and available balance. The available balance may be lower than the balance if some funds have been reserved (e.g. for an open limit order). Account entries affect the balance and available balance independently.\n\nAccount entries are numbered sequentially. It is guaranteed that entries are never reordered or deleted. It is also guaranteed that the core attributes of the entry (the running balances and index) are never modified. Therefore, an Account acts as an append-only log of transactions.\n",
      "name": "Accounts"
    },
    {
      "description": "Users are able to manage their beneficiaries - banks or other financial institutions that are able to receive assets.\n",
      "name": "Beneficiaries"
    },
    {
      "description": "Market data API calls can be accessed by anyone without authentication. The only exception is <code>Get candles</code> endpoint which does require authentication. The data returned may be cached for up to 1 second. The Streaming API (see below) can be used if lower latency market data is needed.\n",
      "name": "Market"
    },
    {
      "description": "Trading on the market is done by submitting Orders. After a new Order has been created, it is submitted for processing by the order matching engine. The Order then either matches against an existing order in the order book and is filled or it rests in the order book until it is stopped.</p> <p><a href=\"/help/articles/1000168414\">Click here to read more about how order matching works.</a>.\n",
      "name": "Orders"
    },
    {
      "description": "Receive addresses are used by cryptocurrencies to send assets to a specific \"wallet\" or user's account. They are a unique address within the blockchain, so assets sent to that address will only be associated with one wallet.\n\nUsers may have multiple receive addresses depending on the number of Accounts they have and what currency is associated with that Account.\n",
      "name": "Receive"
    },
    {
      "description": "Users are able to pre-validate receive addresses under travel rules for cryptocurrency sends from their account.\n",
      "name": "Address"
    },
    {
      "description": "Users are able to send assets from their accounts to the receive address for a cryptocurrency of the same type as their account.  For example, a Bitcoin account can send assets to a Bitcoin receive address, etc.\n\nSends can be made to cryptocurrency receive addresses.\n\n<b>Warning!</b> Cryptocurrency transactions are irreversible. Please ensure your program has been thoroughly tested before using this call.\n",
      "name": "Send"
    },
    {
      "description": "Users are able to perform credit and debit operations on their accounts through the API. We refer to these operations as Transfers. Transfers can come through multiple channels, for example: on-chain sends and receives, bank transfers, card payments, etc...\n\nThe currently supported transfer methods are:\n\n  <ul>\n    <li><b>ZAR_EFT</b>: EFT</li>\n    <li><b>NAD_EFT</b>: EFT</li>\n    <li><b>KES_EFT</b>: EFT</li>\n    <li><b>KES_MPESA</b>: M-Pesa</li>\n    <li><b>MYR_IBG</b>: Interbank GIRO / IBFT</li>\n    <li><b>IDR_LLG</b>: Bank transfer, Lalu Lintas Giro</li>\n    <li><b>NGN_EFT</b>: Bank transfer</li>\n    <li><b>ZMW_EFT</b>: Bank transfer</li>\n    <li><b>SGD_GIRO</b>: GIRO / FAST</li>\n    <li><b>SGD_WIRE</b>: International Wire</li>\n    <li><b>EUR_SEPA</b>: SEPA transfer</li>\n    <li><b>GBP</b>: Bank transfer</li>\n    <li><b>UGX_EFT</b>: Bank transfer</li>\n  </ul>\n  Withdrawals and on-chain sends are debit (outbound) Transfers on the user account. Deposits and on-chain receives are credit (inbound) Transfers on the user account.\n\n  For on-chain transfers field `transaction_id` will be populated to facilitate record reconciliation.\n",
      "name": "Transfers"
    },
    {
      "description": "The websocket API provides streaming access to data such as market data or user data (e.g. order fills). It is more efficient and provides lower latency information than repeatedly polling the order book and recent trades, but is more complicated to implement.\n\nThe streaming protocol works by requiring the client to keep an in-memory record of the streamed data, such as the order book. Update messages are then sent from the server and the client uses these to update its copy of the order book. When applied correctly, the client's view of the order book will be identical to the server's view.\n\n<h2>Market stream</h2>\n\n<h3>Protocol</h3>\n\nThe client state consists of the following data:\n\n<ul>\n  <li>sequence number</li>\n  <li>set of bid orders (id, price, volume)</li>\n  <li>set of ask orders (id, price, volume)</li>\n  <li>list of trades</li>\n  <li>market status</li>\n</ul>\n\nEach update message transmitted from the server has a unique increasing sequence number. The message with sequence number n can be applied to state sequence n-1 to produce state sequence n.\n\nA message may contain multiple updates which must be applied atomically and in order.\n\nIf an update is received out-of-sequence (for example update sequence n+2 or n-1 received after update sequence n), the client cannot continue and must reinitialise the state.\n\n<p>There are four types of update:</p>\n\n<ul>\n<li>Create\n<li>Delete\n<li>Trade\n<li>Status\n</ul>\n\n<h4>Create</h4>\n\nAdd a bid or ask Order to the Order Book with a given id, price and volume.  For example:\n\n<pre>\n{\n  \"order_id\": \"BXMC2CJ7HNB88U4\",\n  \"type\": \"BID\",\n  \"price\": \"1234.00\",\n  \"volume\": \"1.23\"\n}\n</pre>\n\n<h4>Delete</h4>\n\nRemove the order from the order book with a given id.  For example:\n\n<pre>\n{\n  \"order_id\": \"BXMC2CJ7HNB88U4\"\n}\n</pre>\n\n<h4>Trade</h4>\n\nReduce the outstanding volume of an Order in the Order Book (<code>maker_order_id</code>) and append a Trade to the Trades List.  For example:\n\n<pre>\n{\n  \"sequence\": 24509303,\n  \"base\": \"0.1\",\n  \"counter\": \"5232.00\",\n  \"maker_order_id\": \"BXMC2CJ7HNB88U4\",\n  \"taker_order_id\": \"BXMC2CJ7HNB88U5\"\n}\n</pre>\n<h4>Status</h4>\n\nSet the status of the market to the given value. This field will not include the **POSTONLY** state a market is in during the 24-hour launch window. During this launch window, this status will report as **ACTIVE**, but the API will not accept orders without the **post_only** parameter set to true.\n\n<pre>\n{\n  \"status\": \"POSTONLY\",\n}\n</pre>\n\n<h3>Examples</h3>\n<h4>A new order is placed below market</h4>\n\nIn this case, an update message is sent with a single create update.\n\n<h4>A market order is placed that is immediately filled</h4>\n\nIn this case, an update message is sent containing multiple trade updates. There will be no create update since the new order never enters the order book.\n\n<h4>An order is placed that is partially filled</h4>\n\nIn this case, the update message contains multiple trade updates and a single create update. The volume in the create update is the remaining volume for the order.\n\n<h4>An order is stopped</h4>\n\nIn this case, the update message contains a single delete update.\n<h4>The market switches to post-only and trading is suspended</h4>\n\nIn this case, the update message contains a single status update.\n\n<h3>Websockets</h3>\n\nThe streaming updates protocol described above can be accessed using websockets. The server sends the current order book state, and then sends update messages as quickly as possible. Both the client and server must send regular keep alive messages to avoid disconnection during periods of low update message activity.\n\nConnect to the websocket server at: <code>wss://ws.luno.com/api/1/stream/:pair</code>\n\nThe client must start by sending API key credentials:\n\n<pre>\n{\n  \"api_key_id\": \"abcdef\",\n  \"api_key_secret\": \"api_key_secret_goes_here\"\n}\n</pre>\n\nThe server will then send the current order book in the following format:\n\n<pre>\n{\n  \"sequence\": \"24352\",\n  \"asks\": [\n    {\n      \"id\": \"BXMC2CJ7HNB88U4\",\n      \"price\": \"1234.00\",\n      \"volume\": \"0.93\"\n    }\n  ],\n  \"bids\": [\n    {\n      \"id\": \"BXMC2CJ7HNB88U5\",\n      \"price\": \"1201.00\",\n      \"volume\": \"1.22\"\n    }\n  ],\n  \"status\": \"ACTIVE\",\n  \"timestamp\": 1528884331021\n}\n</pre>\n\nThe server then sends messages like the following:\n\n<pre>\n{\n  \"sequence\": \"24353\",\n  \"trade_updates\": null, // array of 0 or more trade updates\n  \"create_update\": null, // null or 1 create update\n  \"delete_update\": null, // null or 1 delete update\n  \"status_update\": null, // null or 1 status update\n  \"timestamp\": 1469031991\n}\n</pre>\n\nAn empty message is a <em>keep alive message</em>.\nPing/Pong messages are supported.\n\nIf there is any error while processing an update (e.g. an out-of-order update) or there is a network error or timeout (e.g. keep alive message not received in time), the client should close the connection and reconnect in order to reinitialise its state. It is important that clients implement some kind of backoff to avoid being rate limited in case of errors.\n\n<h2>User stream</h2>\n\n<h3>Protocol</h3>\n\n<p>There are three types of update:</p>\n\n<ul>\n<li>Order Status</li>\n<li>Order Fill</li>\n<li>Balance Update</li>\n</ul>\n\n<h4>Order Status</h4>\n\nUpdate the status of an order.  For example:\n\n<pre>\n{\n  \"order_id\": \"BXGMHMJXVEZK6NS\",\n  \"client_order_id\": \"sample-XYZ\",\n  \"market_id\": \"XBTZAR\",\n  \"status\": \"AWAITING\"\n}\n</pre>\n\nThe possible values for `status` are `AWAITING`, `PENDING` and `COMPLETE`.\n\n<h4>Order Fill</h4>\n\nUpdate the fill data of an order.  For example:\n\n<pre>\n{\n  \"order_id\": \"BXGMHMJXVEZK6NS\",\n  \"client_order_id\": \"sample-XYZ\",\n  \"market_id\": \"XBTZAR\",\n  \"base_fill\": \"1.00000000\",\n  \"counter_fill\": \"100.00000000\",\n  \"base_delta\": \"0.40000000\",\n  \"counter_delta\": \"40.00000000\",\n  \"base_fee\": \"0.00100000\",\n  \"counter_fee\": \"0.10000000\",\n  \"base_fee_delta\": \"0.00040000\",\n  \"counter_fee_delta\": \"0.04000000\"\n}\n</pre>\n\n<h4>Balance Update</h4>\n\nLatest account balance status:\n\n<pre>\n{\n  \"account_id\": 8203463422864003664\",\n  \"row_index\": 1,\n  \"balance\": \"100.00000000\",\n  \"balance_delta\": \"100.00000000\",\n  \"available\": \"99.00000000\",\n  \"available_delta\": \"1.00000000\"\n}\n</pre>\n\n<h3>Websockets</h3>\n\nThe streaming updates protocol described above can be accessed using websockets. The server sends update messages as quickly as possible.\n\nConnect to the websocket server at: <code>wss://ws.luno.com/api/1/userstream</code>\n\nThe client must start by sending API key credentials:\n\n<pre>\n{\n  \"api_key_id\": \"abcdef\",\n  \"api_key_secret\": \"api_key_secret_goes_here\"\n}\n</pre>\n\nThe server then sends messages like the following:\n\n<pre>\n{\n  \"type\": \"order_status\",\n  \"timestamp\": 1469031991,\n  \"order_status_update\": null, // null or 1 order status update\n  \"order_fill_update\": null, // null or 1 order fill update\n  \"balance_update\": nill, // null or balance update\n}\n</pre>\nThe possible values for `type` are `order_status`, `order_fill`, `balance_update`.\n\nPing/Pong messages are supported.\n\nIt is important that clients implement some kind of backoff to avoid being rate limited in case of errors.\n  \nThe server keeps a cache of all messages sent in the last 5 minutes. When reconnecting, messages generated while\nthe client was disconnected will be resent to ensure messages are not missed. Note that staying disconnected for\nlonger than 5 minutes will discard the message cache.\n",
      "name": "Streaming API"
    },
    {
      "description": "This section describes the error codes in more detail.\n<ul>\n<li><code>ErrAccountLimit</code> You can't add another wallet with this currency</li>\n<li><code>ErrAccountNotFound</code> Cannot find that account</li>\n<li><code>ErrAccountsNotDifferent</code> Debit and credit accounts must be different</li>\n<li><code>ErrActiveCryptoRequestExists</code> Send request pending. Please try again after it has completed.</li>\n<li><code>ErrAddressCreateRateLimitReached</code> Receive address create rate limit reached. Please try again later.</li>\n<li><code>ErrAmountTooBig</code> The specified amount is higher than the maximum allowed.</li>\n<li><code>ErrAmountTooSmall</code> The specified amount is lower than the minimum allowed.</li>\n<li><code>ErrApiKeyRevoked</code> Your API key has been revoked.</li>\n<li><code>ErrBeneficiaryNotFound</code> Beneficiary not Found</li>\n<li><code>ErrBlockedSendsCurrency</code> Receives are currently disabled for this currency</li>\n<li><code>ErrCannotStopUnknownOrNonPendingOrder</code> Cannot stop unknown or non-pending order.</li>\n<li><code>ErrCannotTradeWhileQuoteActive</code> Cannot trade while you have any active quotes.</li>\n<li><code>ErrCounterDenominationNotAllowed</code> Amount contains too many decimal places</li>\n<li><code>ErrCreditAccountNotTransactional</code> The specified credit-account must be transactional</li>\n<li><code>ErrCustomRefNotAllowed</code> Custom reference not allowed</li>\n<li><code>ErrDeadlineExceeded</code> Could not complete before the deadline</li>\n<li><code>ErrDebitAccountNotTransactional</code> Debit account not transactional</li>\n<li><code>ErrDescriptionTooLong</code> Your transaction reference is too long. The maximum length is 256 characters.</li>\n<li><code>ErrDifferentCurrencies</code> Debit and credit accounts have different currencies</li>\n<li><code>ErrDisallowedTarget</code> Given address not allowed.</li>\n<li><code>ErrDuplicateClientMoveID</code> Duplicate client move id</li>\n<li><code>ErrDuplicateClientOrderID</code> Duplicate client order id</li>\n<li><code>ErrDuplicateExternalID</code> A withdrawal with an identical external id already exists.</li>\n<li><code>ErrERC20AddressAlreadyAssigned</code> You can only create 1 ERC-20 receive address per token</li>\n<li><code>ErrERC20AssignNonDefault</code> You can only assign ERC-20 receive addresses to your default account</li>\n<li><code>ErrIncompatibleBeneficiary</code> Beneficiary is incompatible with the requested withdrawal.</li>\n<li><code>ErrIncorrectPin</code> Invalid pin specified</li>\n<li><code>ErrInsufficientBalance</code> Insufficient balance.</li>\n<li><code>ErrInsufficientFunds</code> Account has insufficient funds</li>\n<li><code>ErrInsufficientPerms</code> You do not have the required permissions to perform this action</li>\n<li><code>ErrInternal</code> Something went wrong. We're looking into it.</li>\n<li><code>ErrInvalidAccount</code> Account is invalid</li>\n<li><code>ErrInvalidAccountID</code> Invalid account ID specified</li>\n<li><code>ErrInvalidAmount</code> Invalid amount specified</li>\n<li><code>ErrInvalidArguments</code> If any request parameters have invalid values this error will be returned. This error should also include a list of the offending fields to help identify and fix any issues.</li>\n<li><code>ErrInvalidBaseVolume</code> Invalid base volume for sell order.</li>\n<li><code>ErrInvalidClientOrderId</code> Invalid client order id</li>\n<li><code>ErrInvalidCounterVolume</code> Invalid counter volume for buy order.</li>\n<li><code>ErrInvalidCurrency</code> Invalid currency specified</li>\n<li><code>ErrInvalidDetails</code> Bank account details invalid</li>\n<li><code>ErrInvalidMarketPair</code> Market pair is invalid</li>\n<li><code>ErrInvalidOrderRef</code> Order reference is invalid</li>\n<li><code>ErrInvalidOrderSide</code> Order side is invalid</li>\n<li><code>ErrInvalidParameters</code> Invalid parameters</li>\n<li><code>ErrInvalidPrice</code> Invalid order price.</li>\n<li><code>ErrInvalidRequestType</code> Invalid withdrawal request type specified.</li>\n<li><code>ErrInvalidStopDirection</code> Stop direction is invalid.</li>\n<li><code>ErrInvalidStopPrice</code> Invalid order stop price.</li>\n<li><code>ErrInvalidVolume</code> Invalid order volume.</li>\n<li><code>ErrLimitOutOfRange</code> List limit is out of allowed range</li>\n<li><code>ErrMarketNotAllowed</code> This market is not enabled for you.</li>\n<li><code>ErrMarketUnavailable</code> Market not available</li>\n<li><code>ErrMaxActiveFiatRequestsExists</code> Too many withdrawals in progress. Cancel one or try again later.</li>\n<li><code>ErrNoAddressesAssigned</code> No funding addresses linked to default account</li>\n<li><code>ErrNoTradesToInferStopDirection</code> Could not place Stop Limit Order, no trades to determine direction</li>\n<li><code>ErrNotEnoughLiquidity</code> Market order price would vary too much from the market rate - use a limit order instead</li>\n<li><code>ErrNotFound</code> No result found</li>\n<li><code>ErrOrderCanceled</code> Your post-only order was cancelled before trading</li>\n<li><code>ErrOrderNotFound</code> Cannot find that order</li>\n<li><code>ErrPostOnlyMode</code> Market is in post-only mode</li>\n<li><code>ErrPostOnlyNotAllowed</code> IOC and FOK time-in-force types are not supported as post-only orders</li>\n<li><code>ErrPriceDenominationNotAllowed</code> Price contains too many decimal places</li>\n<li><code>ErrPriceTooHigh</code> Price is above the maximum</li>\n<li><code>ErrPriceTooLow</code> Price is below the minimum</li>\n<li><code>ErrRejectedBeneficiary</code> Cannot request withdrawal to rejected beneficiary.</li>\n<li><code>ErrRequestTypeDoesNotSupportFastWithdrawals</code> The specified request type does not support fast withdrawals.</li>\n<li><code>ErrStopPriceTooHigh</code> Stop price is too high.</li>\n<li><code>ErrStopPriceTooLow</code> Stop price is too low.</li>\n<li><code>ErrTooManyRequests</code> You are exceeding the allowed request rate limit</li>\n<li><code>ErrTooManyRowsRequested</code> Too many rows requested</li>\n<li><code>ErrTravelRule</code> Please ensure that you've initiated a once-off crypto send for this specific wallet address via the website or mobile app and included relevant Travel Rule information before trying again via the send API. <a href=\"/help/articles/421340781836897\" target=\"_blank\">Click here</a> for more information on the Travel Rule.</li>\n<li><code>ErrUnauthorised</code> You are not authorised to access this route</li>\n<li><code>ErrUnderMaintenance</code> The market is currently undergoing maintenance</li>\n<li><code>ErrUpdateRequired</code> Luno app update required</li>\n<li><code>ErrUserBlockedForCancelWithdrawal</code> User blocked from cancelling withdrawals</li>\n<li><code>ErrUserNotVerifiedForCurrency</code> You are not verified for this currency</li>\n<li><code>ErrValueTooHigh</code> Order value too high</li>\n<li><code>ErrVerificationLevelTooLow</code> You must verify your identity using the Luno app before you can send crypto.</li>\n<li><code>ErrVolumeDenominationNotAllowed</code> Volume contains too many decimal places</li>\n<li><code>ErrVolumeTooHigh</code> Volume is above the maximum</li>\n<li><code>ErrVolumeTooLow</code> Volume is below the minimum</li>\n<li><code>ErrWithdrawalBlocked</code> To increase your withdraw limit add more information to your profile in settings.</li>\n<li><code>ErrWithdrawalNotFound</code> Cannot find that withdrawal</li></ul>",
      "name": "Error Codes"
    },
    {
      "description": "<ul>\n  <li>\n      <strong>2024-08-06:</strong>\n      <ul>\n          <li>Set integer timestamp fields format as <code>timestamp</code></li>\n      </ul>\n  </li>\n  <li>\n      <strong>2024-07-17:</strong>\n      <ul>\n          <li>Alter documentation to indicate that unix timestamp fields are integer instead of string</li>\n          <li>Add account_id field to Create receive address call</li>\n      </ul>\n  </li>\n    <li>\n        <strong>2024-06-26:</strong>\n          <ul>\n              <li>Added <code>account_id</code> to <code>/api/1/send</code> endpoint</li>\n          </ul>\n      </li>\n    <li>\n        <strong>2024-05-21:</strong>\n        <ul>\n            <li>Add UNKNOWN status to Ticker model</li>\n            <li>Add UNKNOWN status to MarketInfo model</li>\n        </ul>\n    </li>\n  <li>\n      <strong>2024-05-09:</strong>\n      <ul>\n          <li>Added bank_recipient query parameter to ListBeneficiaries\n      </ul>\n  </li>\n   <li>\n        <strong>2024-04-26:</strong>\n        <ul>\n            <li>Added <code>DELETE /api/1/beneficiaries/:id</code> endpoint\n        </ul>\n   </li>\n   <li>\n        <strong>2024-04-24:</strong>\n        <ul>\n            <li>Added <code>POST /api/1/beneficiaries</code> endpoint\n        </ul>\n   </li>\n   <li>\n        <strong>2024-02-21:</strong>\n        <ul>\n            <li>Added <code>transfer_id</code> field to the <code>Withdrawal</code> response object\n        </ul>\n    </li>\n  <li>\n      <strong>2023-12-04:</strong>\n      <ul>\n          <li>Added <code>base_account_id</code> and <code>counter_account_id</code> fields to the <code>OrderV2</code> object\n      </ul>\n  </li>\n  <li><strong>2022-06-23:</strong>\n      <ul>\n        <li>Added <code>client_order_id</code> in Balance Stream section</li>\n        <li>Added \"time_in_force\" parameter to <code>POST /api/1/postorder</code> endpoint</li>\n        <li>Added \"time_in_force\" to <code>GET orders/:id</code> responses</li>\n        <li>Added \"time_in_force\" to <code>GET listorders</code> responses</li>\n        <li>Updated Market documentation to reflect <code>GET /api/exchange/1/candles</code> call is authenticated</li>\n      </ul>\n    </li>\n  <li><strong>2021-12-22:</strong> Added Balance Stream section.</li>\n  <li><strong>2021-10-29:</strong> Added User Stream section.</li>\n  <li><strong>2021-10-22:</strong> Add support for 1m candles for the <code>GET /api/exchange/1/candles</code> endpoint.</li>\n  <li><strong>2021-08-04:</strong> Add <strong>Error Codes</strong> section along with restrictions to users in jurisdiction with money travel rules.</li>\n  <li><strong>2021-02-18:</strong> Add <code>GET /api/exchange/1/transfers</code> to list deposits and withdrawals.</li>\n  <li><strong>2020-08-20:</strong> Removed Lightning API section.</li>\n  <li><strong>2020-06-22:</strong> Updated domain to api.luno.com</li>\n  <li><strong>2020-02-24:</strong> Added optional <code>destination_tag</code> and <code>has_destination_tag</code> parameter to <code>POST /api/1/send</code> to support XRP sends. Please note, not specifying <code>has_destination_tag</code> parameters to <code>POST /api/1/send</code> to support XRP sends with destination tags. Please see https://xrpl.org/source-and-destination-tags.html to learn more about XRP destination tags.\n  <li><strong>2020-02-12:</strong> Added <code>PUT /api/1/accounts/:id/name</code> to allow updating of an account name.</li>\n  <li><strong>2019-11-21:</strong> Added <code>GET /api/1/beneficiaries</code> to allow listing of bank beneficiaries.</li>\n  <li><strong>2018-07-16:</strong> Added aggregated order book API. Rate limits for market data have been increased to 1 per second. Market data may be cached for up to 1 second.</li>\n  <li><strong>2018-06-29:</strong> Add <code>post_only</code> parameter to <code>POST /api/1/postorder</code>.</li>\n  <li><strong>2018-06-15:</strong> Update PHP and Python SDK URLs.</li>\n  <li><strong>2018-06-13:</strong> Added <code>timestamp</code> to the orderbook streamer response.</li>\n  <li><strong>2018-06-08:</strong> Update Go SDK URL.</li>\n  <li><strong>2017-12-23:</strong> Added <code>maker_order_id</code> and <code>taker_order_id</code> to streaming trade updates. Deprecated <code>order_id</code>.</li>\n  <li><strong>2017-10-31:</strong> OAuth2 is no longer available for new applications.</li>\n  <li><strong>2017-10-16:</strong> Updated <code>/api/1/trades</code> to only return <code>BID</code> or <code>ASK</code> types and it may now lag behind latest data.</li>\n  <li><strong>2017-07-02:</strong> Updated websocket server to wss://ws.luno.com.</li>\n  <li><strong>2017-03-02:</strong> Added <code>/api/1/fee_info</code> which returns your fees and 30 day trading volume.</li>\n  <li><strong>2016-11-21:</strong> The <code>/api/1/trades</code> now returns at most 100 results per call.</li>\n  <li><strong>2016-11-01:</strong> Removed 50 receive address create limit on <code>POST /api/1/funding_address</code> to allow unlimited receive addresses per account. Address creation is rate limited to 1 per hour, allowing for bursts of up to 10 consecutive calls.</li>\n  <li><strong>2016-08-10:</strong> Added <code>GET /api/1/listtrades</code> to allow listing of recent trades. Please note that trades will soon be removed from the response of <code>GET /api/1/listorders</code> <code>GET /api/1/orders/:id</code>.</li>\n  <li><strong>2016-08-05:</strong> Added beta Streaming API section</li>\n  <li><strong>2016-07-25:</strong> Added optional <code>beneficiary_id</code> parameter to <code>POST /api/1/withdrawals</code>.</li>\n  <li><strong>2016-05-29:</strong> Error code 429 may be returned when exceeding rate limits. This will become the default as of 2016-07-01.</li>\n  <li><strong>2016-04-04:</strong> Added <code>completed_timestamp</code> field to <code>GET /api/1/listorders</code> and <code>GET /api/1/orders/:id</code> responses.</li>\n  <li><strong>2016-02-05:</strong> Added optional <code>since</code> parameter to <code>GET /api/1/trades</code> and added <code>is_buy</code> field to the response.</li>\n  <li><strong>2015-09-14:</strong> Added <code>POST /api/1/marketorder</code> to allow placing of market orders.</li>\n  <li><strong>2015-07-29:</strong> Added <code>Perm_R_Beneficiaries</code> and <code>Perm_W_Beneficiaries</code> permissions. You will have to generate a new API key if you require these permissions.</li>\n  <li><strong>2015-06-08:</strong> Renamed <code>GET /api/1/withdrawals/</code> to <code>GET /api/1/withdrawals</code> and <code>POST /api/1/withdrawals/</code> to <code>POST /api/1/withdrawals</code> to be more consistent with other endpoints. The old URLs are now deprecated.</li>\n  <li><strong>2015-05-28:</strong> Added <code>POST accounts</code> for creating additional accounts in specified currencies.</li>\n  <li><strong>2015-05-07:</strong> Added the \"Name\" field to the \"Balance\" response</li>\n  <li><strong>2015-04-25:</strong>\n    <ul>\n      <li>Added the \"Accounts\" section.</li>\n      <li>Added the account transactions and pending transactions calls.</li>\n      <li>Added the \"Permissions\" section.</li>\n      <li>Documented which permissions are required for each call.</li>\n      <li>Updated description of the \"send\" call. A pin is no longer required.</li>\n      <li>Added \"name\" parameter to <code>POST /api/1/funding_address.</code></li>\n    </ul>\n  </li>\n  <li><strong>2015-03-27:</strong> Return a list of trades for an order on <code>GET orders/:id</code> if the order has any trades.</li>\n  <li><strong>2015-01-30:</strong> Clarified the interpretation of <code>base</code>, <code>counter</code>, <code>base_fee</code> and <code>counter_fee</code> in the <code>list_orders</code> response in the case where <code>counter_fee</code> is nonzero for buy orders and where <code>base_fee</code> is nonzero for sell orders.</li>\n  <li><strong>2014-12-17:</strong> The amount parameter for withdrawal requests now excludes the withdrawal fee.</li>\n  <li><strong>2014-12-12:</strong>\n    <ul>\n      <li>Added the new Quotes API.</li>\n      <li>The <code>transactions</code> beta call has been deprecated.</li>\n    </ul>\n  </li>\n  <li><strong>2014-12-04:</strong> The <code>balance</code> method can now be called with no arguments to return all account balances.</li>\n  <li><strong>2014-08-26:</strong>\n    <ul>\n      <li>Added Send API call.</li>\n      <li>Added OAuth2 API.</li>\n    </ul>\n  </li>\n  <li><strong>2014-06-10:</strong> Orders placed through the API are no longer subject to different limits than those placed through the website.</li>\n  <li><strong>2014-06-02:</strong>\n    <ul>\n      <li>You can now create multiple API keys with different permissions (e.g. read-only, read/write).</li>\n      <li>Added calls to list, create, get and cancel withdrawal requests.</li>\n      <li>Added link to Android client library.</li>\n    </ul>\n  </li>\n  <li><strong>2014-05-29:</strong>\n    <ul>\n      <li>The preferred host name for API calls has changed to <code>api.mybitx.com</code>.</li>\n      <li>Added experimental call to retrieve transactions list.</li>\n      <li>Added call to allocate new receive addresses.</li>\n      <li>Receive address call now returns the amount received by that address.</li>\n      <li>You can now request <code>listorders</code> to return only the list of open orders.</li>\n    </ul>\n  </li>\n  <li><strong>2014-04-15:</strong> Previously orders created through the API would expire after 24 hours. Now, orders created through the API do not expire. The behaviour is now the same as for orders placed through the website.</li>\n  <li><strong>2014-01-25:</strong>\n    <ul>\n      <li>A new <code>funding_address</code> call has been added to get the bitcoin address you need to fund your trade account balance.</li>\n    </ul>\n  </li>\n  <li><strong>2014-01-21:</strong>\n    <ul>\n      <li>The API has been extended to support multiple asset pairs.</li>\n      <li>A new <code>balance</code> call has been added to query the trading account balance.</li>\n      <li>All URLs have been renamed from <code>/api/1/BTCZAR/x</code> to <code>/api/1/x?pair=XBTZAR</code>. The old URLs are now deprecated.</li>\n      <li>getlimits: This call has been deprecated. Please use the new <code>balance</code> call instead.</li>\n      <li>ticker: The <code>currency</code> field is now deprecated.</li>\n      <li>orderbook: The <code>currency</code> field is now deprecated.</li>\n      <li>trades: The <code>currency</code> field is now deprecated.</li>\n      <li>listorders: The <code>btc</code>, <code>zar</code>, <code>fee_btc</code> and <code>fee_zar</code> fields are now deprecated. Please use <code>base</code>, <code>counter</code>, <code>fee_base</code>, <code>fee_counter</code> fields instead.</li>\n      <li>The embedded market indicator has been removed since nobody is using it.</li>\n      <li>All deprecated features will continue to work for two months.</li>\n    </ul>\n  </li>\n  <li><strong>2014-01-06:</strong>\n    <ul>\n      <li>listorders: Added fee_btc and fee_zar fields.</li>\n      <li>listorders: Removed SETTLEMENT state (it's no longer relevant).</li>\n      <li>ticker: Removed mtgox_price (use Mt Gox's API directly instead).</li>\n    </ul>\n  </li>\n</ul>\n",
      "name": "Changelog"
    }
  ],
  "servers": [
    {
      "url": "https://api.luno.com"
    }
  ],
  "components": {
    "responses": {
      "apiError": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "description": "Unique error reference",
                  "type": "string",
                  "x-go-name": "Code"
                },
                "message": {
                  "description": "Verbose error message",
                  "type": "string",
                  "x-go-name": "Message"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "AccountBalance": {
        "type": "object",
        "title": "Balance represents the current state of the account.",
        "properties": {
          "account_id": {
            "description": "ID of the account.",
            "type": "string",
            "format": "int64",
            "x-go-name": "AccountId",
            "example": "\"237592692\""
          },
          "asset": {
            "description": "Currency code for the asset held in this account.",
            "type": "string",
            "x-go-name": "Asset",
            "example": "\"XBT\""
          },
          "balance": {
            "description": "The amount available to send or trade.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Balance"
          },
          "name": {
            "description": "The name set by the user upon creating the account.",
            "type": "string",
            "x-go-name": "Name",
            "example": "\"Trading account\""
          },
          "reserved": {
            "description": "Amount locked by Luno and cannot be sent or traded. This could be due to\nopen orders.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Reserved"
          },
          "unconfirmed": {
            "description": "Amount that is awaiting some sort of verification to be credited to this\naccount. This could be an on-chain transaction that Luno is waiting for\nfurther block verifications to happen.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Unconfirmed"
          }
        },
        "x-go-name": "Balance",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "AccountInfo": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "x-go-name": "Currency"
          },
          "id": {
            "type": "string",
            "format": "int64",
            "x-go-name": "Id"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "pending": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "x-go-name": "Pending"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "x-go-name": "Transactions"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "AddressMeta": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "x-go-name": "Label"
          },
          "value": {
            "type": "string",
            "x-go-name": "Value"
          }
        },
        "x-go-package": "bitx/sharedproto/walletpb"
      },
      "BalanceList": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountBalance"
            },
            "x-go-name": "Balance"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "BigDecimal": {
        "description": "A BigDecimal consists of an integer mantissa (d.i) and an exponent (d.scale).\nThe value represented by d is:\n\nd.i * 10^(-d.scale)\n\nA zero BigDecimal struct is valid and represents 0 (i = 0, scale = 0).",
        "type": "object",
        "title": "BigDecimal is an arbitrary precision decimal number.",
        "x-go-package": "bitx/currency"
      },
      "CancelWithdrawalResponse": {
        "description": "CancelWithdrawalResponse response",
        "type": "object",
        "properties": {
          "amount": {
            "description": "Amount to withdraw",
            "type": "string",
            "format": "amount",
            "x-go-name": "Amount"
          },
          "created_at": {
            "description": "Unix time the withdrawal was initiated, in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CreatedAt"
          },
          "currency": {
            "description": "Withdrawal currency.",
            "type": "string",
            "x-go-name": "Currency",
            "example": "EUR"
          },
          "external_id": {
            "description": "External ID has the value that was passed in when the Withdrawal request was posted.",
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "fee": {
            "description": "Withdrawal fee",
            "type": "string",
            "format": "amount",
            "x-go-name": "Fee"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "status": {
            "description": "Status",
            "type": "string",
            "enum": [
              "PENDING",
              "PROCESSING",
              "COMPLETED",
              "CANCELLED",
              "WAITING",
              "CANCELLING",
              "UNKNOWN"
            ],
            "x-go-name": "Status"
          },
          "transfer_id": {
            "description": "Transfer ID is the identifier of the Withdrawal's transfer once it completes.",
            "type": "string",
            "x-go-name": "TransferID"
          },
          "type": {
            "description": "Type distinguishes between different withdrawal methods where more than one is supported\nfor the given currency.",
            "type": "string",
            "x-go-name": "Type",
            "example": "SGD_WIRE"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "Candle": {
        "type": "object",
        "properties": {
          "close": {
            "description": "Closing price",
            "type": "string",
            "format": "amount",
            "x-go-name": "Close"
          },
          "high": {
            "description": "High price",
            "type": "string",
            "format": "amount",
            "x-go-name": "High"
          },
          "low": {
            "description": "Low price",
            "type": "string",
            "format": "amount",
            "x-go-name": "Low"
          },
          "open": {
            "description": "Opening price",
            "type": "string",
            "format": "amount",
            "x-go-name": "Open"
          },
          "timestamp": {
            "description": "Unix timestamp in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "Start"
          },
          "volume": {
            "description": "Volume traded",
            "type": "string",
            "format": "amount",
            "x-go-name": "Volume"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "CreateWithdrawalResponse": {
        "description": "CreateWithdrawalResponse response",
        "type": "object",
        "properties": {
          "amount": {
            "description": "Amount to withdraw",
            "type": "string",
            "format": "amount",
            "x-go-name": "Amount"
          },
          "created_at": {
            "description": "Unix time the withdrawal was initiated, in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CreatedAt"
          },
          "currency": {
            "description": "Withdrawal currency.",
            "type": "string",
            "x-go-name": "Currency",
            "example": "EUR"
          },
          "external_id": {
            "description": "External ID has the value that was passed in when the Withdrawal request was posted.",
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "fee": {
            "description": "Withdrawal fee",
            "type": "string",
            "format": "amount",
            "x-go-name": "Fee"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "status": {
            "description": "Status",
            "type": "string",
            "enum": [
              "PENDING",
              "PROCESSING",
              "COMPLETED",
              "CANCELLED",
              "WAITING",
              "CANCELLING",
              "UNKNOWN"
            ],
            "x-go-name": "Status"
          },
          "transfer_id": {
            "description": "Transfer ID is the identifier of the Withdrawal's transfer once it completes.",
            "type": "string",
            "x-go-name": "TransferID"
          },
          "type": {
            "description": "Type distinguishes between different withdrawal methods where more than one is supported\nfor the given currency.",
            "type": "string",
            "x-go-name": "Type",
            "example": "SGD_WIRE"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "CryptoDetails": {
        "description": "CryptoDetails contains a transaction's cryptocurrency address\nand transaction id",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "x-go-name": "Address"
          },
          "txid": {
            "type": "string",
            "x-go-name": "TxID"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "DecimalFloat": {
        "description": "Using this type is only necessary for types that are Marshaled, not requests, that use UnmarshalJSON\nBigDecimal already handles floats *and* strings in UnmarshalJSON",
        "type": "string",
        "format": "amount",
        "title": "DecimalFloat will marshal the decimal as a floating value instead of a string, e.g. 1234.5678 vs \"1234.5678\"\nThis is how \"the Decimal type that shall not be named\" was marshaled so use this function only for legacy APIs, new JSON APIs\nshould use a string value, i.e. Marshal the BigDecimal directly",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "DetailFields": {
        "type": "object",
        "title": "DetailFields contains structured, machine-readable transaction details.",
        "properties": {
          "crypto_details": {
            "$ref": "#/components/schemas/CryptoDetails"
          },
          "trade_details": {
            "$ref": "#/components/schemas/TradeDetails"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "FeeInfo": {
        "type": "object",
        "properties": {
          "maker_fee": {
            "type": "string",
            "x-go-name": "MakerFee"
          },
          "taker_fee": {
            "type": "string",
            "x-go-name": "TakerFee"
          },
          "thirty_day_volume": {
            "type": "string",
            "x-go-name": "ThirtyDayVolume"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "FundsMove": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "The assets quantity to move from the debit account to credit account. This is always a positive value.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Amount"
          },
          "client_move_id": {
            "description": "User defined unique ID",
            "type": "string",
            "x-go-name": "ClientMoveID",
            "example": "move-1642.2008_10_31"
          },
          "created_at": {
            "description": "Unix time the move was initiated, in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CreatedAt"
          },
          "credit_account_id": {
            "description": "The account to credit the funds to.",
            "type": "string",
            "x-go-name": "CreditAccountID",
            "example": "8557520073699984185"
          },
          "debit_account_id": {
            "description": "The account to debit the funds from.",
            "type": "string",
            "x-go-name": "DebitAccountID",
            "example": "2225762606892986213"
          },
          "id": {
            "description": "Unique ID, defined by Luno",
            "type": "string",
            "x-go-name": "ID",
            "example": "6213702911573325445"
          },
          "status": {
            "description": "Current status of the move.\n\nStatus meaning:<br>\n<code>CREATED</code> The move is awaiting execution.<br>\n<code>MOVING</code> The funds have been reserved and the move is being executed.<br>\n<code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available\nbalance.<br>\n<code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the\ndebit account doesn't have enough available funds to move.<br>",
            "type": "string",
            "enum": [
              "CREATED",
              "MOVING",
              "SUCCESSFUL",
              "FAILED"
            ],
            "x-go-name": "Status",
            "example": "MOVING"
          },
          "updated_at": {
            "description": "Unix time the move was last updated, in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "UpdatedAt"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "GetCandlesResponse": {
        "description": "GetCandlesResponse response",
        "type": "object",
        "properties": {
          "candles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Candle"
            },
            "x-go-name": "Candles"
          },
          "duration": {
            "description": "Duration in seconds",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Duration"
          },
          "pair": {
            "type": "string",
            "x-go-name": "Pair"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "GetMoveResponse": {
        "description": "GetMoveResponse response for GET /1/move",
        "type": "object",
        "properties": {
          "amount": {
            "description": "The assets quantity to move from the debit account to credit account. This is always a positive value.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Amount"
          },
          "client_move_id": {
            "description": "User defined unique ID",
            "type": "string",
            "x-go-name": "ClientMoveID",
            "example": "move-1642.2008_10_31"
          },
          "created_at": {
            "description": "Unix time the move was initiated, in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CreatedAt"
          },
          "credit_account_id": {
            "description": "The account to credit the funds to.",
            "type": "string",
            "x-go-name": "CreditAccountID",
            "example": "8557520073699984185"
          },
          "debit_account_id": {
            "description": "The account to debit the funds from.",
            "type": "string",
            "x-go-name": "DebitAccountID",
            "example": "2225762606892986213"
          },
          "id": {
            "description": "Unique ID, defined by Luno",
            "type": "string",
            "x-go-name": "ID",
            "example": "6213702911573325445"
          },
          "status": {
            "description": "Current status of the move.\n\nStatus meaning:<br>\n<code>CREATED</code> The move is awaiting execution.<br>\n<code>MOVING</code> The funds have been reserved and the move is being executed.<br>\n<code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available\nbalance.<br>\n<code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the\ndebit account doesn't have enough available funds to move.<br>",
            "type": "string",
            "enum": [
              "CREATED",
              "MOVING",
              "SUCCESSFUL",
              "FAILED"
            ],
            "x-go-name": "Status",
            "example": "MOVING"
          },
          "updated_at": {
            "description": "Unix time the move was last updated, in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "UpdatedAt"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "GetOrder2Response": {
        "description": "GetOrder2Response response",
        "type": "object",
        "properties": {
          "base": {
            "description": "Amount of base filled, this value is always positive.\n\nUse this field and `side` to determine credit or debit of funds.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Base"
          },
          "base_account_id": {
            "description": "The base currency account",
            "type": "integer",
            "format": "int64",
            "x-go-name": "BaseAccountID"
          },
          "client_order_id": {
            "description": "Client Order ID has the value that was passed in when the Order was posted.",
            "type": "string",
            "x-go-name": "ClientOrderID"
          },
          "completed_timestamp": {
            "description": "Time of order completion (Unix milliseconds)\n\nThis value is set at the time of this order leaving the order book,\neither immediately upon posting or later on due to a trade or cancellation.\nWhilst the order is still pending/live it will be 0.",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CompletedTimestamp"
          },
          "counter": {
            "description": "Amount of counter filled, this value is always positive.\n\nUse this field and `side` to determine credit or debit of funds.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Counter"
          },
          "counter_account_id": {
            "description": "The counter currency account",
            "type": "integer",
            "format": "int64",
            "x-go-name": "CounterAccountID"
          },
          "creation_timestamp": {
            "description": "Time of order creation (Unix milliseconds)",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CreationTimestamp"
          },
          "expiration_timestamp": {
            "description": "Time of order expiration (Unix milliseconds)\n\nThis value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "ExpirationTimestamp"
          },
          "fee_base": {
            "description": "Base amount of fees to be charged",
            "type": "string",
            "format": "amount",
            "x-go-name": "FeeBase"
          },
          "fee_counter": {
            "description": "Counter amount of fees to be charged",
            "type": "string",
            "format": "amount",
            "x-go-name": "FeeCounter"
          },
          "limit_price": {
            "description": "Limit price to transact",
            "type": "string",
            "format": "amount",
            "x-go-name": "LimitPrice"
          },
          "limit_volume": {
            "description": "Limit volume to transact",
            "type": "string",
            "format": "amount",
            "x-go-name": "LimitVolume"
          },
          "order_id": {
            "description": "The order reference",
            "type": "string",
            "x-go-name": "Ref"
          },
          "pair": {
            "description": "Specifies the market",
            "type": "string",
            "x-go-name": "Pair"
          },
          "side": {
            "description": "The intention of the order, whether to buy or sell funds in the market.\n\nYou can use this to determine the flow of funds in the order.",
            "type": "string",
            "enum": [
              "BUY",
              "SELL"
            ],
            "x-go-name": "Side"
          },
          "status": {
            "description": "The current state of the order\n\nStatus meaning:<br>\n<code>AWAITING</code> The order is awaiting to enter the order book.<br>\n<code>PENDING</code> The order is in the order book. Some trades may\nhave taken place but the order is not filled yet.<br>\n<code>COMPLETE</code> The order is no longer in the order book. It has\nbeen settled/filled or has been cancelled.",
            "type": "string",
            "enum": [
              "AWAITING",
              "PENDING",
              "COMPLETE"
            ],
            "x-go-name": "Status"
          },
          "stop_direction": {
            "description": "Direction to trigger the order",
            "type": "string",
            "enum": [
              "ABOVE",
              "BELOW"
            ],
            "x-go-name": "StopDirection"
          },
          "stop_price": {
            "description": "Price to trigger the order",
            "type": "string",
            "format": "amount",
            "x-go-name": "StopPrice"
          },
          "time_in_force": {
            "description": "The Time in force option used when the LimitOrder was posted.\n\nOnly returned on limit orders.<br>\n<code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>\n<code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>\n<code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.",
            "type": "string",
            "x-go-name": "TimeInForce"
          },
          "type": {
            "description": "The order type",
            "type": "string",
            "enum": [
              "LIMIT",
              "MARKET",
              "STOP_LIMIT"
            ],
            "x-go-name": "Type"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "GetOrderBookResponse": {
        "description": "1/orderbook\n1/orderbook_top",
        "type": "object",
        "title": "GetOrderBookResponse response for:",
        "properties": {
          "asks": {
            "description": "List of asks sorted from lowest to highest price",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBookEntry"
            },
            "x-go-name": "Asks"
          },
          "bids": {
            "description": "List of bids sorted from highest to lowest price",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBookEntry"
            },
            "x-go-name": "Bids"
          },
          "timestamp": {
            "description": "Unix timestamp in milliseconds",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Timestamp"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "GetOrderResponse": {
        "description": "GetOrderResponse response",
        "type": "object",
        "properties": {
          "base": {
            "description": "Amount of base filled, this value is always positive.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Base"
          },
          "completed_timestamp": {
            "description": "Time of order completion (Unix milliseconds)\n\nThis value is set at the time of this order leaving the order book,\neither immediately upon posting or later on due to a trade or cancellation.\nWhilst the order is still pending/live it will be 0.",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CompletedTimestamp"
          },
          "counter": {
            "description": "Amount of counter filled, this value is always positive.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Counter"
          },
          "creation_timestamp": {
            "description": "Time of order creation (Unix milliseconds)",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CreationTimestamp"
          },
          "expiration_timestamp": {
            "description": "Time of order expiration (Unix milliseconds)\n\nThis value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "ExpirationTimestamp"
          },
          "fee_base": {
            "description": "Base amount of fees to be charged",
            "type": "string",
            "format": "amount",
            "x-go-name": "FeeBase"
          },
          "fee_counter": {
            "description": "Counter amount of fees to be charged",
            "type": "string",
            "format": "amount",
            "x-go-name": "FeeCounter"
          },
          "limit_price": {
            "description": "Limit price to transact",
            "type": "string",
            "format": "amount",
            "x-go-name": "LimitPrice"
          },
          "limit_volume": {
            "description": "Limit volume to transact",
            "type": "string",
            "format": "amount",
            "x-go-name": "LimitVolume"
          },
          "order_id": {
            "type": "string",
            "x-go-name": "OrderId"
          },
          "pair": {
            "description": "Specifies the market.",
            "type": "string",
            "x-go-name": "Pair"
          },
          "state": {
            "description": "<code>PENDING</code> The order has been placed. Some trades may have\ntaken place but the order is not filled yet.<br>\n<code>COMPLETE</code> The order is no longer active. It has been settled\nor has been cancelled.",
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETE"
            ],
            "x-go-name": "OrderState"
          },
          "time_in_force": {
            "description": "The Time in force option used when the LimitOrder was posted.\n\nOnly returned on limit orders.<br>\n<code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>\n<code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>\n<code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.",
            "type": "string",
            "x-go-name": "TimeInForce"
          },
          "type": {
            "description": "<code>BUY</code> buy market order.<br>\n<code>SELL</code> sell market order.<br>\n<code>BID</code> bid (buy) limit order.<br>\n<code>ASK</code> ask (sell) limit order.",
            "type": "string",
            "enum": [
              "BUY",
              "SELL",
              "BID",
              "ASK"
            ],
            "x-go-name": "OrderType"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "GetTickerResponse": {
        "description": "GetTickerResponse response for /api/ticker",
        "type": "object",
        "properties": {
          "ask": {
            "description": "The lowest ask price",
            "type": "string",
            "format": "amount",
            "x-go-name": "Ask"
          },
          "bid": {
            "description": "The highest bid price",
            "type": "string",
            "format": "amount",
            "x-go-name": "Bid"
          },
          "last_trade": {
            "description": "Last trade price",
            "type": "string",
            "format": "amount",
            "x-go-name": "Last"
          },
          "pair": {
            "type": "string",
            "x-go-name": "Pair"
          },
          "rolling_24_hour_volume": {
            "description": "24h rolling trade volume",
            "type": "string",
            "format": "amount",
            "x-go-name": "Rolling24HourVolume"
          },
          "status": {
            "description": "Market current status\n\n<code>ACTIVE</code> when the market is trading normally\n\n<code>POSTONLY</code> when the market has been suspended and only post-only orders will be accepted\n\n<code>DISABLED</code> when the market is shutdown and no orders can be accepted\n\n<code>UNKNOWN</code> the market status could not be determined. This is a temporary state.",
            "type": "string",
            "enum": [
              "ACTIVE",
              "POSTONLY",
              "DISABLED",
              "UNKNOWN"
            ],
            "x-go-name": "Status",
            "example": "ACTIVE"
          },
          "timestamp": {
            "description": "Unix timestamp in milliseconds of the tick",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "Timestamp"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "GetWithdrawalResponse": {
        "description": "GetWithdrawalResponse response",
        "type": "object",
        "properties": {
          "amount": {
            "description": "Amount to withdraw",
            "type": "string",
            "format": "amount",
            "x-go-name": "Amount"
          },
          "created_at": {
            "description": "Unix time the withdrawal was initiated, in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CreatedAt"
          },
          "currency": {
            "description": "Withdrawal currency.",
            "type": "string",
            "x-go-name": "Currency",
            "example": "EUR"
          },
          "external_id": {
            "description": "External ID has the value that was passed in when the Withdrawal request was posted.",
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "fee": {
            "description": "Withdrawal fee",
            "type": "string",
            "format": "amount",
            "x-go-name": "Fee"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "status": {
            "description": "Status",
            "type": "string",
            "enum": [
              "PENDING",
              "PROCESSING",
              "COMPLETED",
              "CANCELLED",
              "WAITING",
              "CANCELLING",
              "UNKNOWN"
            ],
            "x-go-name": "Status"
          },
          "transfer_id": {
            "description": "Transfer ID is the identifier of the Withdrawal's transfer once it completes.",
            "type": "string",
            "x-go-name": "TransferID"
          },
          "type": {
            "description": "Type distinguishes between different withdrawal methods where more than one is supported\nfor the given currency.",
            "type": "string",
            "x-go-name": "Type",
            "example": "SGD_WIRE"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "ListMovesResponse": {
        "description": "ListMovesResponse response",
        "type": "object",
        "properties": {
          "moves": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FundsMove"
            },
            "x-go-name": "Moves"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "ListOrders2Response": {
        "description": "ListOrders2Response response for /api/2/listorders",
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderV2"
            },
            "x-go-name": "Orders"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "ListOrdersResponse": {
        "description": "ListOrdersResponse response",
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "x-go-name": "Orders"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "ListTickersResponse": {
        "description": "ListTickersResponse response for /api/tickers",
        "type": "object",
        "properties": {
          "tickers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ticker"
            },
            "x-go-name": "Tickers"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "ListTradesResponse": {
        "description": "ListTradesResponse response for /api/1/trades",
        "type": "object",
        "properties": {
          "trades": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicTrade"
            },
            "x-go-name": "Trades"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "ListTransactionsResponse": {
        "description": "ListTransactionsResponse response",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "int64",
            "x-go-name": "ID"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "x-go-name": "Transactions"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "ListTransfersResponse": {
        "description": "ListTransfersResponse response for /api/1/transfers",
        "type": "object",
        "properties": {
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transfer"
            },
            "x-go-name": "Transfers"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "ListUserTradesResponse": {
        "description": "ListUserTradesResponse response for /api/1/listtrades",
        "type": "object",
        "properties": {
          "trades": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeV2"
            },
            "x-go-name": "Trades"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "ListWithdrawalsResponse": {
        "description": "ListWithdrawalsResponse response",
        "type": "object",
        "properties": {
          "withdrawals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Withdrawal"
            },
            "x-go-name": "Withdrawals"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "MarketInfo": {
        "description": "MarketInfo current market information",
        "type": "object",
        "properties": {
          "base_currency": {
            "description": "Base currency code",
            "type": "string",
            "x-go-name": "BaseCcy",
            "example": "XBT"
          },
          "counter_currency": {
            "description": "Counter currency code",
            "type": "string",
            "x-go-name": "CounterCcy",
            "example": "EUR"
          },
          "fee_scale": {
            "description": "Fee decimal places",
            "type": "integer",
            "format": "int64",
            "x-go-name": "FeeScale"
          },
          "market_id": {
            "description": "Unique identifier for the market",
            "type": "string",
            "x-go-name": "MarketID",
            "example": "XBTEUR"
          },
          "max_price": {
            "description": "Maximum order price",
            "type": "string",
            "format": "amount",
            "x-go-name": "MaxPrice",
            "example": "100000.00"
          },
          "max_volume": {
            "description": "Maximum order volume",
            "type": "string",
            "format": "amount",
            "x-go-name": "MaxVolume",
            "example": "100.0"
          },
          "min_price": {
            "description": "Minimum order price",
            "type": "string",
            "format": "amount",
            "x-go-name": "MinPrice",
            "example": "100.00"
          },
          "min_volume": {
            "description": "Minimum order volume",
            "type": "string",
            "format": "amount",
            "x-go-name": "MinVolume",
            "example": "0.0005"
          },
          "price_scale": {
            "description": "Price decimal places",
            "type": "integer",
            "format": "int64",
            "x-go-name": "PriceScale",
            "example": 2
          },
          "trading_status": {
            "description": "Current market trading status:<br>\n<code>POST_ONLY</code> Trading is indefinitely suspended. This state is\ncommonly used when new markets are being launched to give traders enough\ntime to setup their orders before trading begins. When in this status,\norders can only be posted as post-only.<br>\n<code>ACTIVE</code> Trading is fully enabled.<br>\n<code>SUSPENDED</code> Trading has been temporarily suspended due to very\nhigh volatility. When in this status, orders can only be posted as\npost-only.<br>\n<code>Unknown</code> Trading status is unknown. This could indicate a temporary error\non the market and should resolve shortly.",
            "type": "string",
            "enum": [
              "POST_ONLY",
              "ACTIVE",
              "SUSPENDED",
              "UNKNOWN"
            ],
            "x-go-name": "TradingStatus"
          },
          "volume_scale": {
            "description": "Volume decimal places",
            "type": "integer",
            "format": "int64",
            "x-go-name": "VolumeScale",
            "example": 4
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "MarketsInfoResponse": {
        "description": "MarketsInfoResponse response for /api/2/markets",
        "type": "object",
        "properties": {
          "markets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketInfo"
            },
            "x-go-name": "Markets"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "MoveResponse": {
        "description": "MoveResponse response",
        "type": "object",
        "properties": {
          "id": {
            "description": "Move unique identifier",
            "type": "string",
            "x-go-name": "ID"
          },
          "status": {
            "description": "The current state of the move.\n\nStatus meaning:<br>\n<code>CREATED</code> The move is awaiting execution.<br>\n<code>MOVING</code> The funds have been reserved and the move is being executed.<br>\n<code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available\nbalance.<br>\n<code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the\ndebit account doesn't have enough available funds to move.<br>",
            "type": "string",
            "enum": [
              "CREATED",
              "MOVING",
              "SUCCESSFUL",
              "FAILED"
            ],
            "x-go-name": "Status"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "Network": {
        "type": "integer",
        "format": "int64",
        "x-go-package": "bitx/coins/network"
      },
      "NotComparable": {
        "description": "type CanCompare struct {\ni *int\n}\n\nvar y CanCompare\nfmt.Println(y == y) // passes go vet but shouldn't because surely we want to compare the value of i not it's address\n\nBut when we add NotComparable:\n\ntype CantCompare struct {\nNotComparable\ni *int\n}\n\nvar n CantCompare\nfmt.Println(n == n) // fails go vet\n\nThe final benefit of this type is that if used as the first value/type\nin a struct it does not add to the aligned size of the struct",
        "type": "object",
        "title": "NotComparable Add this type as the first type/value to any struct to avoid the struct type being compared directly\nSince arrays aren't comparable, adding _ will cause <struct> == <struct> to fail a vet check. For example:",
        "x-go-package": "bitx/lib/ludash"
      },
      "Order": {
        "description": "The `base` and `counter` amounts are the principal\namounts that were traded, ignoring fees. For example, if the order resulted\nin a single trade of 1 BTC for 1000 ZAR, then `base`=1 BTC and\n`counter`=1000 ZAR.\n\nThe `fee_base` and `fee_counter` amounts are the fees\ndebited after the trade principal amounts.\n\nFor example, for a buy order, `base - base_fee` would be credited\nto the BTC account and `counter + counter_fee` would be debited\nfrom the ZAR account. Similarly, for a sell order, `counter -\ncounter_fee` would be credited to the ZAR account and `base +\nbase_fee` would be debited from the BTC account.",
        "type": "object",
        "title": "Order data",
        "properties": {
          "base": {
            "description": "Amount of base filled, this value is always positive.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Base"
          },
          "completed_timestamp": {
            "description": "Time of order completion (Unix milliseconds)\n\nThis value is set at the time of this order leaving the order book,\neither immediately upon posting or later on due to a trade or cancellation.\nWhilst the order is still pending/live it will be 0.",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CompletedTimestamp"
          },
          "counter": {
            "description": "Amount of counter filled, this value is always positive.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Counter"
          },
          "creation_timestamp": {
            "description": "Time of order creation (Unix milliseconds)",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CreationTimestamp"
          },
          "expiration_timestamp": {
            "description": "Time of order expiration (Unix milliseconds)\n\nThis value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "ExpirationTimestamp"
          },
          "fee_base": {
            "description": "Base amount of fees to be charged",
            "type": "string",
            "format": "amount",
            "x-go-name": "FeeBase"
          },
          "fee_counter": {
            "description": "Counter amount of fees to be charged",
            "type": "string",
            "format": "amount",
            "x-go-name": "FeeCounter"
          },
          "limit_price": {
            "description": "Limit price to transact",
            "type": "string",
            "format": "amount",
            "x-go-name": "LimitPrice"
          },
          "limit_volume": {
            "description": "Limit volume to transact",
            "type": "string",
            "format": "amount",
            "x-go-name": "LimitVolume"
          },
          "order_id": {
            "type": "string",
            "x-go-name": "OrderId"
          },
          "pair": {
            "description": "Specifies the market.",
            "type": "string",
            "x-go-name": "Pair"
          },
          "state": {
            "description": "<code>PENDING</code> The order has been placed. Some trades may have\ntaken place but the order is not filled yet.<br>\n<code>COMPLETE</code> The order is no longer active. It has been settled\nor has been cancelled.",
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETE"
            ],
            "x-go-name": "OrderState"
          },
          "time_in_force": {
            "description": "The Time in force option used when the LimitOrder was posted.\n\nOnly returned on limit orders.<br>\n<code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>\n<code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>\n<code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.",
            "type": "string",
            "x-go-name": "TimeInForce"
          },
          "type": {
            "description": "<code>BUY</code> buy market order.<br>\n<code>SELL</code> sell market order.<br>\n<code>BID</code> bid (buy) limit order.<br>\n<code>ASK</code> ask (sell) limit order.",
            "type": "string",
            "enum": [
              "BUY",
              "SELL",
              "BID",
              "ASK"
            ],
            "x-go-name": "OrderType"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "OrderBook": {
        "type": "object",
        "title": "OrderBook represents a market order book state at a certain time.",
        "properties": {
          "asks": {
            "description": "List of asks sorted from lowest to highest price",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBookEntry"
            },
            "x-go-name": "Asks"
          },
          "bids": {
            "description": "List of bids sorted from highest to lowest price",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBookEntry"
            },
            "x-go-name": "Bids"
          },
          "timestamp": {
            "description": "Unix timestamp in milliseconds",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Timestamp"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "OrderBookEntry": {
        "description": "OrderBookEntry is the representation of one or more order resting in the\norder book.",
        "type": "object",
        "properties": {
          "price": {
            "description": "Limit price at which orders are trading at",
            "type": "string",
            "format": "amount",
            "x-go-name": "Price",
            "example": "10000.0"
          },
          "volume": {
            "description": "The volume available at the limit price",
            "type": "string",
            "format": "amount",
            "x-go-name": "Volume",
            "example": "1.35"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "OrderV2": {
        "type": "object",
        "properties": {
          "base": {
            "description": "Amount of base filled, this value is always positive.\n\nUse this field and `side` to determine credit or debit of funds.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Base"
          },
          "base_account_id": {
            "description": "The base currency account",
            "type": "integer",
            "format": "int64",
            "x-go-name": "BaseAccountID"
          },
          "client_order_id": {
            "description": "Client Order ID has the value that was passed in when the Order was posted.",
            "type": "string",
            "x-go-name": "ClientOrderID"
          },
          "completed_timestamp": {
            "description": "Time of order completion (Unix milliseconds)\n\nThis value is set at the time of this order leaving the order book,\neither immediately upon posting or later on due to a trade or cancellation.\nWhilst the order is still pending/live it will be 0.",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CompletedTimestamp"
          },
          "counter": {
            "description": "Amount of counter filled, this value is always positive.\n\nUse this field and `side` to determine credit or debit of funds.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Counter"
          },
          "counter_account_id": {
            "description": "The counter currency account",
            "type": "integer",
            "format": "int64",
            "x-go-name": "CounterAccountID"
          },
          "creation_timestamp": {
            "description": "Time of order creation (Unix milliseconds)",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CreationTimestamp"
          },
          "expiration_timestamp": {
            "description": "Time of order expiration (Unix milliseconds)\n\nThis value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "ExpirationTimestamp"
          },
          "fee_base": {
            "description": "Base amount of fees to be charged",
            "type": "string",
            "format": "amount",
            "x-go-name": "FeeBase"
          },
          "fee_counter": {
            "description": "Counter amount of fees to be charged",
            "type": "string",
            "format": "amount",
            "x-go-name": "FeeCounter"
          },
          "limit_price": {
            "description": "Limit price to transact",
            "type": "string",
            "format": "amount",
            "x-go-name": "LimitPrice"
          },
          "limit_volume": {
            "description": "Limit volume to transact",
            "type": "string",
            "format": "amount",
            "x-go-name": "LimitVolume"
          },
          "order_id": {
            "description": "The order reference",
            "type": "string",
            "x-go-name": "Ref"
          },
          "pair": {
            "description": "Specifies the market",
            "type": "string",
            "x-go-name": "Pair"
          },
          "side": {
            "description": "The intention of the order, whether to buy or sell funds in the market.\n\nYou can use this to determine the flow of funds in the order.",
            "type": "string",
            "enum": [
              "BUY",
              "SELL"
            ],
            "x-go-name": "Side"
          },
          "status": {
            "description": "The current state of the order\n\nStatus meaning:<br>\n<code>AWAITING</code> The order is awaiting to enter the order book.<br>\n<code>PENDING</code> The order is in the order book. Some trades may\nhave taken place but the order is not filled yet.<br>\n<code>COMPLETE</code> The order is no longer in the order book. It has\nbeen settled/filled or has been cancelled.",
            "type": "string",
            "enum": [
              "AWAITING",
              "PENDING",
              "COMPLETE"
            ],
            "x-go-name": "Status"
          },
          "stop_direction": {
            "description": "Direction to trigger the order",
            "type": "string",
            "enum": [
              "ABOVE",
              "BELOW"
            ],
            "x-go-name": "StopDirection"
          },
          "stop_price": {
            "description": "Price to trigger the order",
            "type": "string",
            "format": "amount",
            "x-go-name": "StopPrice"
          },
          "time_in_force": {
            "description": "The Time in force option used when the LimitOrder was posted.\n\nOnly returned on limit orders.<br>\n<code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>\n<code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>\n<code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.",
            "type": "string",
            "x-go-name": "TimeInForce"
          },
          "type": {
            "description": "The order type",
            "type": "string",
            "enum": [
              "LIMIT",
              "MARKET",
              "STOP_LIMIT"
            ],
            "x-go-name": "Type"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "PostLimitOrderResponse": {
        "type": "object",
        "title": "PostLimitOrderResponse is the response for /api/1/postorder.",
        "properties": {
          "order_id": {
            "description": "Unique order identifier",
            "type": "string",
            "x-go-name": "OrderID",
            "example": "BXMC2CJ7HNB88U4"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "PostMarketOrderResponse": {
        "type": "object",
        "title": "PostMarketOrderResponse is the response for /api/1/marketorder.",
        "properties": {
          "order_id": {
            "description": "Unique order identifier",
            "type": "string",
            "x-go-name": "OrderID",
            "example": "BXMC2CJ7HNB88U4"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "PublicTrade": {
        "type": "object",
        "title": "PublicTrade contains only basic information about a trade.",
        "properties": {
          "is_buy": {
            "description": "Whether the taker was buying or not.",
            "type": "boolean",
            "x-go-name": "IsBuy"
          },
          "price": {
            "description": "Price at which the asset traded at",
            "type": "string",
            "format": "amount",
            "x-go-name": "Price"
          },
          "sequence": {
            "description": "The ever incrementing trade identifier within a market",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Sequence"
          },
          "timestamp": {
            "description": "Unix timestamp in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "Timestamp"
          },
          "volume": {
            "description": "Amount of assets traded",
            "type": "string",
            "format": "amount",
            "x-go-name": "Volume"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "ReceiveAddress": {
        "description": "AddressResp wallet address response body",
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "format": "int64",
            "x-go-name": "AccountId"
          },
          "address": {
            "type": "string",
            "x-go-name": "Address"
          },
          "address_meta": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressMeta"
            },
            "x-go-name": "AddressMeta"
          },
          "asset": {
            "type": "string",
            "x-go-name": "Asset"
          },
          "assigned_at": {
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "AssignedAt"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "qr_code_uri": {
            "type": "string",
            "x-go-name": "QrCodeUri"
          },
          "receive_fee": {
            "type": "string",
            "format": "amount",
            "x-go-name": "ReceiveFee"
          },
          "total_received": {
            "type": "string",
            "format": "amount",
            "x-go-name": "TotalReceived"
          },
          "total_unconfirmed": {
            "type": "string",
            "format": "amount",
            "x-go-name": "TotalUnconfirmed"
          }
        },
        "x-go-name": "AddressResp",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "SendFeeResponse": {
        "description": "SendFeeResponse response object for send fee call",
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "x-go-name": "Currency"
          },
          "fee": {
            "type": "string",
            "format": "amount",
            "x-go-name": "Fee"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "SendNetwork": {
        "description": "SendNetwork represents the network that can be used for crypto sending",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Network"
          },
          "name": {
            "description": "The network name",
            "type": "string",
            "x-go-name": "Name",
            "example": "Ethereum"
          },
          "native_currency": {
            "description": "The native currency for the network",
            "type": "string",
            "x-go-name": "NativeCurrency",
            "example": "ETH"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "SendNetworksResponse": {
        "description": "SendNetworksResponse response object for send networks call",
        "type": "object",
        "properties": {
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SendNetwork"
            },
            "x-go-name": "Networks"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "StopOrderResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "x-go-name": "Success"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "Ticker": {
        "description": "Ticker summarised instant market data",
        "type": "object",
        "properties": {
          "ask": {
            "description": "The lowest ask price",
            "type": "string",
            "format": "amount",
            "x-go-name": "Ask"
          },
          "bid": {
            "description": "The highest bid price",
            "type": "string",
            "format": "amount",
            "x-go-name": "Bid"
          },
          "last_trade": {
            "description": "Last trade price",
            "type": "string",
            "format": "amount",
            "x-go-name": "Last"
          },
          "pair": {
            "type": "string",
            "x-go-name": "Pair"
          },
          "rolling_24_hour_volume": {
            "description": "24h rolling trade volume",
            "type": "string",
            "format": "amount",
            "x-go-name": "Rolling24HourVolume"
          },
          "status": {
            "description": "Market current status\n\n<code>ACTIVE</code> when the market is trading normally\n\n<code>POSTONLY</code> when the market has been suspended and only post-only orders will be accepted\n\n<code>DISABLED</code> when the market is shutdown and no orders can be accepted\n\n<code>UNKNOWN</code> the market status could not be determined. This is a temporary state.",
            "type": "string",
            "enum": [
              "ACTIVE",
              "POSTONLY",
              "DISABLED",
              "UNKNOWN"
            ],
            "x-go-name": "Status",
            "example": "ACTIVE"
          },
          "timestamp": {
            "description": "Unix timestamp in milliseconds of the tick",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "Timestamp"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "TradeDetails": {
        "description": "TradeDetails contains a transaction volume, price and pair",
        "type": "object",
        "properties": {
          "pair": {
            "description": "Pair of the market",
            "type": "string",
            "x-go-name": "Pair"
          },
          "price": {
            "description": "Price at which the volume traded for",
            "type": "string",
            "format": "amount",
            "x-go-name": "Price"
          },
          "sequence": {
            "description": "Sequence identifies the trade within a market",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Sequence"
          },
          "volume": {
            "description": "Volume is the amount of base traded",
            "type": "string",
            "format": "amount",
            "x-go-name": "Volume"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "TradeV2": {
        "type": "object",
        "properties": {
          "base": {
            "description": "Amount of base filled",
            "type": "string",
            "format": "amount",
            "x-go-name": "Base"
          },
          "client_order_id": {
            "description": "Client Order ID has the value that was passed in when the Order was posted.",
            "type": "string",
            "x-go-name": "ClientOrderID"
          },
          "counter": {
            "description": "Amount of counter filled",
            "type": "string",
            "format": "amount",
            "x-go-name": "Counter"
          },
          "fee_base": {
            "description": "Base amount of fees charged",
            "type": "string",
            "format": "amount",
            "x-go-name": "FeeBase"
          },
          "fee_counter": {
            "description": "Counter amount of fees charged",
            "type": "string",
            "format": "amount",
            "x-go-name": "FeeCounter"
          },
          "is_buy": {
            "type": "boolean",
            "x-go-name": "IsBuy"
          },
          "order_id": {
            "description": "Unique order identifier",
            "type": "string",
            "x-go-name": "OrderID",
            "example": "BXMC2CJ7HNB88U4"
          },
          "pair": {
            "description": "Currency pair",
            "type": "string",
            "x-go-name": "Pair"
          },
          "price": {
            "description": "Order price",
            "type": "string",
            "format": "amount",
            "x-go-name": "Price"
          },
          "sequence": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Sequence"
          },
          "timestamp": {
            "description": "Unix timestamp in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "Timestamp"
          },
          "type": {
            "description": "Order type",
            "type": "string",
            "enum": [
              "BID",
              "ASK"
            ],
            "x-go-name": "OrderType"
          },
          "volume": {
            "description": "Order volume",
            "type": "string",
            "format": "amount",
            "x-go-name": "Volume"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "format": "int64",
            "x-go-name": "AccountID"
          },
          "available": {
            "$ref": "#/components/schemas/DecimalFloat"
          },
          "available_delta": {
            "$ref": "#/components/schemas/DecimalFloat"
          },
          "balance": {
            "$ref": "#/components/schemas/DecimalFloat"
          },
          "balance_delta": {
            "$ref": "#/components/schemas/DecimalFloat"
          },
          "currency": {
            "type": "string",
            "x-go-name": "Currency"
          },
          "description": {
            "description": "Human-readable description of the transaction.",
            "type": "string",
            "x-go-name": "Description"
          },
          "detail_fields": {
            "$ref": "#/components/schemas/DetailFields"
          },
          "details": {
            "description": "Human-readable label-value attributes.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Details"
          },
          "kind": {
            "description": "The kind of the transaction indicates the transaction flow\n\nKinds explained:<br>\n<code>FEE</code> when transaction is towards Luno fees<br>\n<code>TRANSFER</code> when the transaction is a one way flow of funds, e.g. a deposit or crypto send<br>\n<code>EXCHANGE</code> when the transaction is part of a two way exchange, e.g. a trade or instant buy",
            "type": "string",
            "enum": [
              "FEE",
              "TRANSFER",
              "EXCHANGE",
              "INTEREST"
            ],
            "x-go-name": "Kind"
          },
          "reference": {
            "description": "A unique reference for the transaction this statement entry relates to.\nThere may be multiple statement entries related to the same transaction.\nE.g. a withdrawal and the withdrawal fee are two separate statement entries with the same reference.",
            "type": "string",
            "x-go-name": "Reference"
          },
          "row_index": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RowIndex"
          },
          "timestamp": {
            "description": "Unix timestamp, in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "Timestamp"
          }
        },
        "x-go-name": "StatementEntry",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "Transfer": {
        "type": "object",
        "title": "Transfer represents a credit or debit operation on an account.",
        "properties": {
          "amount": {
            "description": "Amount that has been credited or debited on the account. This is always a\npositive value regardless of the transfer direction.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Amount"
          },
          "created_at": {
            "description": "Unix timestamp the transfer was initiated, in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CreatedAt"
          },
          "fee": {
            "description": "Fee that has been charged by Luno with regards to this transfer.\nThis is not included in the `amount`.\nFor example, if you receive a transaction with the raw amount of 1 BTC\nand we charge a `fee` of 0.003 BTC on this transaction you will be\ncredited the `amount` of 0.997 BTC.",
            "type": "string",
            "format": "amount",
            "x-go-name": "Fee"
          },
          "id": {
            "description": "Transfer unique identifier",
            "type": "string",
            "x-go-name": "ID"
          },
          "inbound": {
            "description": "True for credit transfers, false for debits.",
            "type": "boolean",
            "x-go-name": "Inbound"
          },
          "transaction_id": {
            "description": "When the transfer reflects an on-chain transaction this field will have\nthe transaction ID.",
            "type": "string",
            "x-go-name": "TransactionID",
            "example": "fe4d49620bfd6778de38e9609f491c3327b882749541dbd44d7651c533a99a1c"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "Withdrawal": {
        "description": "Withdrawal struct",
        "type": "object",
        "properties": {
          "amount": {
            "description": "Amount to withdraw",
            "type": "string",
            "format": "amount",
            "x-go-name": "Amount"
          },
          "created_at": {
            "description": "Unix time the withdrawal was initiated, in milliseconds",
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "CreatedAt"
          },
          "currency": {
            "description": "Withdrawal currency.",
            "type": "string",
            "x-go-name": "Currency",
            "example": "EUR"
          },
          "external_id": {
            "description": "External ID has the value that was passed in when the Withdrawal request was posted.",
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "fee": {
            "description": "Withdrawal fee",
            "type": "string",
            "format": "amount",
            "x-go-name": "Fee"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "status": {
            "description": "Status",
            "type": "string",
            "enum": [
              "PENDING",
              "PROCESSING",
              "COMPLETED",
              "CANCELLED",
              "WAITING",
              "CANCELLING",
              "UNKNOWN"
            ],
            "x-go-name": "Status"
          },
          "transfer_id": {
            "description": "Transfer ID is the identifier of the Withdrawal's transfer once it completes.",
            "type": "string",
            "x-go-name": "TransferID"
          },
          "type": {
            "description": "Type distinguishes between different withdrawal methods where more than one is supported\nfor the given currency.",
            "type": "string",
            "x-go-name": "Type",
            "example": "SGD_WIRE"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "beneficiary": {
        "type": "object",
        "properties": {
          "bank_account_branch": {
            "description": "Bank branch code",
            "type": "string",
            "x-go-name": "BankAccountBranch"
          },
          "bank_account_number": {
            "description": "Beneficiary bank account number",
            "type": "string",
            "x-go-name": "BankAccountNumber"
          },
          "bank_account_type": {
            "description": "Bank account type",
            "type": "string",
            "enum": [
              "Current/Cheque",
              "Savings",
              "Transmission"
            ],
            "x-go-name": "BankAccountType"
          },
          "bank_country": {
            "description": "Bank country of origin",
            "type": "string",
            "x-go-name": "BankCountry"
          },
          "bank_name": {
            "description": "Bank SWIFT code",
            "type": "string",
            "x-go-name": "BankName"
          },
          "bank_recipient": {
            "description": "The owner of the recipient account",
            "type": "string",
            "x-go-name": "BankRecipient"
          },
          "created_at": {
            "description": "Time of beneficiary creation",
            "type": "integer",
            "format": "int64",
            "x-go-name": "CreatedAt"
          },
          "id": {
            "description": "Unique id referencing beneficiary",
            "type": "string",
            "x-go-name": "Id"
          },
          "supports_fast_withdrawals": {
            "description": "If the bank account supports fast withdrawals",
            "type": "boolean",
            "x-go-name": "SupportsFastWithdrawals"
          }
        },
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "createAccountResponse": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "x-go-name": "Currency"
          },
          "id": {
            "type": "string",
            "format": "int64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "x-go-name": "CreateAccountResponse",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "createBeneficiaryResponse": {
        "description": "CreateBeneficiaryResponse response object for creating beneficiaries",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "ID"
          }
        },
        "x-go-name": "CreateBeneficiaryResponse",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "createFundingAddressResponse": {
        "description": "CreateFundingAddressResponse create wallet response body",
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "format": "int64",
            "x-go-name": "AccountId"
          },
          "address": {
            "type": "string",
            "x-go-name": "Address"
          },
          "address_meta": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressMeta"
            },
            "x-go-name": "AddressMeta"
          },
          "asset": {
            "type": "string",
            "x-go-name": "Asset"
          },
          "assigned_at": {
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "AssignedAt"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "qr_code_uri": {
            "type": "string",
            "x-go-name": "QrCodeUri"
          },
          "receive_fee": {
            "type": "string",
            "format": "amount",
            "x-go-name": "ReceiveFee"
          },
          "total_received": {
            "type": "string",
            "format": "amount",
            "x-go-name": "TotalReceived"
          },
          "total_unconfirmed": {
            "type": "string",
            "format": "amount",
            "x-go-name": "TotalUnconfirmed"
          }
        },
        "x-go-name": "CreateFundingAddressResponse",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "getBalancesResponse": {
        "description": "GetBalancesResponse balance lookup response",
        "type": "object",
        "properties": {
          "balance": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountBalance"
            },
            "x-go-name": "Balance"
          }
        },
        "x-go-name": "GetBalancesResponse",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "getFeeInfoResponse": {
        "description": "GetFeeInfoResponse response object for get fee info calls",
        "type": "object",
        "properties": {
          "maker_fee": {
            "type": "string",
            "x-go-name": "MakerFee"
          },
          "taker_fee": {
            "type": "string",
            "x-go-name": "TakerFee"
          },
          "thirty_day_volume": {
            "type": "string",
            "x-go-name": "ThirtyDayVolume"
          }
        },
        "x-go-name": "GetFeeInfoResponse",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "getFundingAddressResponse": {
        "description": "GetFundingAddressResponse get funding address response body",
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "format": "int64",
            "x-go-name": "AccountId"
          },
          "address": {
            "type": "string",
            "x-go-name": "Address"
          },
          "address_meta": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressMeta"
            },
            "x-go-name": "AddressMeta"
          },
          "asset": {
            "type": "string",
            "x-go-name": "Asset"
          },
          "assigned_at": {
            "type": "integer",
            "format": "timestamp",
            "x-go-name": "AssignedAt"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "qr_code_uri": {
            "type": "string",
            "x-go-name": "QrCodeUri"
          },
          "receive_fee": {
            "type": "string",
            "format": "amount",
            "x-go-name": "ReceiveFee"
          },
          "total_received": {
            "type": "string",
            "format": "amount",
            "x-go-name": "TotalReceived"
          },
          "total_unconfirmed": {
            "type": "string",
            "format": "amount",
            "x-go-name": "TotalUnconfirmed"
          }
        },
        "x-go-name": "GetFundingAddressResponse",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "listBeneficiariesResponse": {
        "description": "ListBeneficiariesResponse response object for list beneficiaries",
        "type": "object",
        "properties": {
          "beneficiaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/beneficiary"
            },
            "x-go-name": "Beneficiaries"
          }
        },
        "x-go-name": "ListBeneficiariesResponse",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "listPendingTransactionsResponse": {
        "description": "ListPendingTransactionsResponse",
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "x-go-name": "Currency"
          },
          "id": {
            "type": "string",
            "format": "int64",
            "x-go-name": "Id"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "pending": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "x-go-name": "Pending"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "x-go-name": "Transactions"
          }
        },
        "x-go-name": "ListPendingTransactionsResponse",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "sendResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "x-go-name": "Success"
          },
          "withdrawal_id": {
            "type": "string",
            "x-go-name": "WithdrawalID"
          }
        },
        "x-go-package": "bitx/services/fe/publicapi"
      },
      "updateAccountNameResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "x-go-name": "Success"
          }
        },
        "x-go-name": "UpdateAccountNameResponse",
        "x-go-package": "bitx/services/exchange-api/internal/ops/publicapi"
      },
      "validateAddressResponse": {
        "description": "validateAddressResponse is the non error response of an address validation request",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "x-go-name": "Success"
          }
        },
        "x-go-package": "bitx/services/fe/publicapi"
      }
    }
  }
}